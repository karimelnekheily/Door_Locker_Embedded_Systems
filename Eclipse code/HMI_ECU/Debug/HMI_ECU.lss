
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003194  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00003194  00003228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008000f6  008000f6  000032be  2**0
                  ALLOC
  3 .stab         00002dc0  00000000  00000000  000032c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000124b  00000000  00000000  00006080  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000072cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000740b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000757b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000091c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a0af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ae5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000afbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b249  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ba17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 5f 17 	jmp	0x2ebe	; 0x2ebe <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 30       	cpi	r26, 0x09	; 9
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <main>
      8a:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4c 18 	jmp	0x3098	; 0x3098 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af ed       	ldi	r26, 0xDF	; 223
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 58 18 	jmp	0x30b0	; 0x30b0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 58 18 	jmp	0x30b0	; 0x30b0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4c 18 	jmp	0x3098	; 0x3098 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f ed       	ldi	r24, 0xDF	; 223
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 58 18 	jmp	0x30b0	; 0x30b0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 58 18 	jmp	0x30b0	; 0x30b0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 58 18 	jmp	0x30b0	; 0x30b0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 78 18 	jmp	0x30f0	; 0x30f0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <enter_key>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void enter_key(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	key = KEYPAD_getPressedKey();
     b5a:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <KEYPAD_getPressedKey>
     b5e:	80 93 08 01 	sts	0x0108, r24
	if (key == '#')
     b62:	80 91 08 01 	lds	r24, 0x0108
     b66:	83 32       	cpi	r24, 0x23	; 35
     b68:	09 f0       	breq	.+2      	; 0xb6c <enter_key+0x26>
     b6a:	77 c0       	rjmp	.+238    	; 0xc5a <enter_key+0x114>
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a8 e4       	ldi	r26, 0x48	; 72
     b72:	b3 e4       	ldi	r27, 0x43	; 67
     b74:	8b 87       	std	Y+11, r24	; 0x0b
     b76:	9c 87       	std	Y+12, r25	; 0x0c
     b78:	ad 87       	std	Y+13, r26	; 0x0d
     b7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b7c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b7e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b80:	8d 85       	ldd	r24, Y+13	; 0x0d
     b82:	9e 85       	ldd	r25, Y+14	; 0x0e
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	4a ef       	ldi	r20, 0xFA	; 250
     b8a:	54 e4       	ldi	r21, 0x44	; 68
     b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b90:	dc 01       	movw	r26, r24
     b92:	cb 01       	movw	r24, r22
     b94:	8f 83       	std	Y+7, r24	; 0x07
     b96:	98 87       	std	Y+8, r25	; 0x08
     b98:	a9 87       	std	Y+9, r26	; 0x09
     b9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b9c:	6f 81       	ldd	r22, Y+7	; 0x07
     b9e:	78 85       	ldd	r23, Y+8	; 0x08
     ba0:	89 85       	ldd	r24, Y+9	; 0x09
     ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	40 e8       	ldi	r20, 0x80	; 128
     baa:	5f e3       	ldi	r21, 0x3F	; 63
     bac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bb0:	88 23       	and	r24, r24
     bb2:	2c f4       	brge	.+10     	; 0xbbe <enter_key+0x78>
		__ticks = 1;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	9e 83       	std	Y+6, r25	; 0x06
     bba:	8d 83       	std	Y+5, r24	; 0x05
     bbc:	3f c0       	rjmp	.+126    	; 0xc3c <enter_key+0xf6>
	else if (__tmp > 65535)
     bbe:	6f 81       	ldd	r22, Y+7	; 0x07
     bc0:	78 85       	ldd	r23, Y+8	; 0x08
     bc2:	89 85       	ldd	r24, Y+9	; 0x09
     bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	3f ef       	ldi	r19, 0xFF	; 255
     bca:	4f e7       	ldi	r20, 0x7F	; 127
     bcc:	57 e4       	ldi	r21, 0x47	; 71
     bce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bd2:	18 16       	cp	r1, r24
     bd4:	4c f5       	brge	.+82     	; 0xc28 <enter_key+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd6:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd8:	7c 85       	ldd	r23, Y+12	; 0x0c
     bda:	8d 85       	ldd	r24, Y+13	; 0x0d
     bdc:	9e 85       	ldd	r25, Y+14	; 0x0e
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	40 e2       	ldi	r20, 0x20	; 32
     be4:	51 e4       	ldi	r21, 0x41	; 65
     be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bea:	dc 01       	movw	r26, r24
     bec:	cb 01       	movw	r24, r22
     bee:	bc 01       	movw	r22, r24
     bf0:	cd 01       	movw	r24, r26
     bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bf6:	dc 01       	movw	r26, r24
     bf8:	cb 01       	movw	r24, r22
     bfa:	9e 83       	std	Y+6, r25	; 0x06
     bfc:	8d 83       	std	Y+5, r24	; 0x05
     bfe:	0f c0       	rjmp	.+30     	; 0xc1e <enter_key+0xd8>
     c00:	88 ec       	ldi	r24, 0xC8	; 200
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	9c 83       	std	Y+4, r25	; 0x04
     c06:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c08:	8b 81       	ldd	r24, Y+3	; 0x03
     c0a:	9c 81       	ldd	r25, Y+4	; 0x04
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <enter_key+0xc6>
     c10:	9c 83       	std	Y+4, r25	; 0x04
     c12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c14:	8d 81       	ldd	r24, Y+5	; 0x05
     c16:	9e 81       	ldd	r25, Y+6	; 0x06
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	9e 83       	std	Y+6, r25	; 0x06
     c1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c1e:	8d 81       	ldd	r24, Y+5	; 0x05
     c20:	9e 81       	ldd	r25, Y+6	; 0x06
     c22:	00 97       	sbiw	r24, 0x00	; 0
     c24:	69 f7       	brne	.-38     	; 0xc00 <enter_key+0xba>
     c26:	14 c0       	rjmp	.+40     	; 0xc50 <enter_key+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c28:	6f 81       	ldd	r22, Y+7	; 0x07
     c2a:	78 85       	ldd	r23, Y+8	; 0x08
     c2c:	89 85       	ldd	r24, Y+9	; 0x09
     c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c34:	dc 01       	movw	r26, r24
     c36:	cb 01       	movw	r24, r22
     c38:	9e 83       	std	Y+6, r25	; 0x06
     c3a:	8d 83       	std	Y+5, r24	; 0x05
     c3c:	8d 81       	ldd	r24, Y+5	; 0x05
     c3e:	9e 81       	ldd	r25, Y+6	; 0x06
     c40:	9a 83       	std	Y+2, r25	; 0x02
     c42:	89 83       	std	Y+1, r24	; 0x01
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	9a 81       	ldd	r25, Y+2	; 0x02
     c48:	01 97       	sbiw	r24, 0x01	; 1
     c4a:	f1 f7       	brne	.-4      	; 0xc48 <enter_key+0x102>
     c4c:	9a 83       	std	Y+2, r25	; 0x02
     c4e:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(delay); /* Press time */
		g_step++;
     c50:	80 91 e7 00 	lds	r24, 0x00E7
     c54:	8f 5f       	subi	r24, 0xFF	; 255
     c56:	80 93 e7 00 	sts	0x00E7, r24
	}
}
     c5a:	2e 96       	adiw	r28, 0x0e	; 14
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	08 95       	ret

00000c6c <get_password>:
void get_password(uint8 password[])
{
     c6c:	df 93       	push	r29
     c6e:	cf 93       	push	r28
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	6f 97       	sbiw	r28, 0x1f	; 31
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	cd bf       	out	0x3d, r28	; 61
     c80:	9f 8f       	std	Y+31, r25	; 0x1f
     c82:	8e 8f       	std	Y+30, r24	; 0x1e
	for (uint8 i=0;i<5;i++)
     c84:	1d 8e       	std	Y+29, r1	; 0x1d
     c86:	02 c1       	rjmp	.+516    	; 0xe8c <get_password+0x220>
	{
		/* Get the pressed key number, if any switch pressed for more than 500 ms it will considered more than one press */
		key = KEYPAD_getPressedKey();
     c88:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <KEYPAD_getPressedKey>
     c8c:	80 93 08 01 	sts	0x0108, r24
		password[i]=key;
     c90:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c92:	28 2f       	mov	r18, r24
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c98:	9f 8d       	ldd	r25, Y+31	; 0x1f
     c9a:	fc 01       	movw	r30, r24
     c9c:	e2 0f       	add	r30, r18
     c9e:	f3 1f       	adc	r31, r19
     ca0:	80 91 08 01 	lds	r24, 0x0108
     ca4:	80 83       	st	Z, r24

		if((key <= 9) && (key >= 0))
     ca6:	80 91 08 01 	lds	r24, 0x0108
     caa:	8a 30       	cpi	r24, 0x0A	; 10
     cac:	08 f0       	brcs	.+2      	; 0xcb0 <get_password+0x44>
     cae:	76 c0       	rjmp	.+236    	; 0xd9c <get_password+0x130>
		{
			LCD_displayCharacter('*');
     cb0:	8a e2       	ldi	r24, 0x2A	; 42
     cb2:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_displayCharacter>
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	a8 e4       	ldi	r26, 0x48	; 72
     cbc:	b3 e4       	ldi	r27, 0x43	; 67
     cbe:	89 8f       	std	Y+25, r24	; 0x19
     cc0:	9a 8f       	std	Y+26, r25	; 0x1a
     cc2:	ab 8f       	std	Y+27, r26	; 0x1b
     cc4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc6:	69 8d       	ldd	r22, Y+25	; 0x19
     cc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cca:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ccc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	4a ef       	ldi	r20, 0xFA	; 250
     cd4:	54 e4       	ldi	r21, 0x44	; 68
     cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cda:	dc 01       	movw	r26, r24
     cdc:	cb 01       	movw	r24, r22
     cde:	8d 8b       	std	Y+21, r24	; 0x15
     ce0:	9e 8b       	std	Y+22, r25	; 0x16
     ce2:	af 8b       	std	Y+23, r26	; 0x17
     ce4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ce6:	6d 89       	ldd	r22, Y+21	; 0x15
     ce8:	7e 89       	ldd	r23, Y+22	; 0x16
     cea:	8f 89       	ldd	r24, Y+23	; 0x17
     cec:	98 8d       	ldd	r25, Y+24	; 0x18
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	40 e8       	ldi	r20, 0x80	; 128
     cf4:	5f e3       	ldi	r21, 0x3F	; 63
     cf6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cfa:	88 23       	and	r24, r24
     cfc:	2c f4       	brge	.+10     	; 0xd08 <get_password+0x9c>
		__ticks = 1;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	9c 8b       	std	Y+20, r25	; 0x14
     d04:	8b 8b       	std	Y+19, r24	; 0x13
     d06:	3f c0       	rjmp	.+126    	; 0xd86 <get_password+0x11a>
	else if (__tmp > 65535)
     d08:	6d 89       	ldd	r22, Y+21	; 0x15
     d0a:	7e 89       	ldd	r23, Y+22	; 0x16
     d0c:	8f 89       	ldd	r24, Y+23	; 0x17
     d0e:	98 8d       	ldd	r25, Y+24	; 0x18
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	3f ef       	ldi	r19, 0xFF	; 255
     d14:	4f e7       	ldi	r20, 0x7F	; 127
     d16:	57 e4       	ldi	r21, 0x47	; 71
     d18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d1c:	18 16       	cp	r1, r24
     d1e:	4c f5       	brge	.+82     	; 0xd72 <get_password+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d20:	69 8d       	ldd	r22, Y+25	; 0x19
     d22:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d24:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d26:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	40 e2       	ldi	r20, 0x20	; 32
     d2e:	51 e4       	ldi	r21, 0x41	; 65
     d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	bc 01       	movw	r22, r24
     d3a:	cd 01       	movw	r24, r26
     d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	9c 8b       	std	Y+20, r25	; 0x14
     d46:	8b 8b       	std	Y+19, r24	; 0x13
     d48:	0f c0       	rjmp	.+30     	; 0xd68 <get_password+0xfc>
     d4a:	88 ec       	ldi	r24, 0xC8	; 200
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	9a 8b       	std	Y+18, r25	; 0x12
     d50:	89 8b       	std	Y+17, r24	; 0x11
     d52:	89 89       	ldd	r24, Y+17	; 0x11
     d54:	9a 89       	ldd	r25, Y+18	; 0x12
     d56:	01 97       	sbiw	r24, 0x01	; 1
     d58:	f1 f7       	brne	.-4      	; 0xd56 <get_password+0xea>
     d5a:	9a 8b       	std	Y+18, r25	; 0x12
     d5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d5e:	8b 89       	ldd	r24, Y+19	; 0x13
     d60:	9c 89       	ldd	r25, Y+20	; 0x14
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	9c 8b       	std	Y+20, r25	; 0x14
     d66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d68:	8b 89       	ldd	r24, Y+19	; 0x13
     d6a:	9c 89       	ldd	r25, Y+20	; 0x14
     d6c:	00 97       	sbiw	r24, 0x00	; 0
     d6e:	69 f7       	brne	.-38     	; 0xd4a <get_password+0xde>
     d70:	18 c0       	rjmp	.+48     	; 0xda2 <get_password+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d72:	6d 89       	ldd	r22, Y+21	; 0x15
     d74:	7e 89       	ldd	r23, Y+22	; 0x16
     d76:	8f 89       	ldd	r24, Y+23	; 0x17
     d78:	98 8d       	ldd	r25, Y+24	; 0x18
     d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	9c 8b       	std	Y+20, r25	; 0x14
     d84:	8b 8b       	std	Y+19, r24	; 0x13
     d86:	8b 89       	ldd	r24, Y+19	; 0x13
     d88:	9c 89       	ldd	r25, Y+20	; 0x14
     d8a:	98 8b       	std	Y+16, r25	; 0x10
     d8c:	8f 87       	std	Y+15, r24	; 0x0f
     d8e:	8f 85       	ldd	r24, Y+15	; 0x0f
     d90:	98 89       	ldd	r25, Y+16	; 0x10
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	f1 f7       	brne	.-4      	; 0xd92 <get_password+0x126>
     d96:	98 8b       	std	Y+16, r25	; 0x10
     d98:	8f 87       	std	Y+15, r24	; 0x0f
     d9a:	03 c0       	rjmp	.+6      	; 0xda2 <get_password+0x136>
			_delay_ms(delay); // delay between the first press and second
		}
		else
		{
			LCD_displayCharacter('*');
     d9c:	8a e2       	ldi	r24, 0x2A	; 42
     d9e:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_displayCharacter>
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	a8 e4       	ldi	r26, 0x48	; 72
     da8:	b3 e4       	ldi	r27, 0x43	; 67
     daa:	8b 87       	std	Y+11, r24	; 0x0b
     dac:	9c 87       	std	Y+12, r25	; 0x0c
     dae:	ad 87       	std	Y+13, r26	; 0x0d
     db0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     db2:	6b 85       	ldd	r22, Y+11	; 0x0b
     db4:	7c 85       	ldd	r23, Y+12	; 0x0c
     db6:	8d 85       	ldd	r24, Y+13	; 0x0d
     db8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	4a ef       	ldi	r20, 0xFA	; 250
     dc0:	54 e4       	ldi	r21, 0x44	; 68
     dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	8f 83       	std	Y+7, r24	; 0x07
     dcc:	98 87       	std	Y+8, r25	; 0x08
     dce:	a9 87       	std	Y+9, r26	; 0x09
     dd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dd2:	6f 81       	ldd	r22, Y+7	; 0x07
     dd4:	78 85       	ldd	r23, Y+8	; 0x08
     dd6:	89 85       	ldd	r24, Y+9	; 0x09
     dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e8       	ldi	r20, 0x80	; 128
     de0:	5f e3       	ldi	r21, 0x3F	; 63
     de2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     de6:	88 23       	and	r24, r24
     de8:	2c f4       	brge	.+10     	; 0xdf4 <get_password+0x188>
		__ticks = 1;
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	9e 83       	std	Y+6, r25	; 0x06
     df0:	8d 83       	std	Y+5, r24	; 0x05
     df2:	3f c0       	rjmp	.+126    	; 0xe72 <get_password+0x206>
	else if (__tmp > 65535)
     df4:	6f 81       	ldd	r22, Y+7	; 0x07
     df6:	78 85       	ldd	r23, Y+8	; 0x08
     df8:	89 85       	ldd	r24, Y+9	; 0x09
     dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	3f ef       	ldi	r19, 0xFF	; 255
     e00:	4f e7       	ldi	r20, 0x7F	; 127
     e02:	57 e4       	ldi	r21, 0x47	; 71
     e04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e08:	18 16       	cp	r1, r24
     e0a:	4c f5       	brge	.+82     	; 0xe5e <get_password+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e0c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e0e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e10:	8d 85       	ldd	r24, Y+13	; 0x0d
     e12:	9e 85       	ldd	r25, Y+14	; 0x0e
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	40 e2       	ldi	r20, 0x20	; 32
     e1a:	51 e4       	ldi	r21, 0x41	; 65
     e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	bc 01       	movw	r22, r24
     e26:	cd 01       	movw	r24, r26
     e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e2c:	dc 01       	movw	r26, r24
     e2e:	cb 01       	movw	r24, r22
     e30:	9e 83       	std	Y+6, r25	; 0x06
     e32:	8d 83       	std	Y+5, r24	; 0x05
     e34:	0f c0       	rjmp	.+30     	; 0xe54 <get_password+0x1e8>
     e36:	88 ec       	ldi	r24, 0xC8	; 200
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	9c 83       	std	Y+4, r25	; 0x04
     e3c:	8b 83       	std	Y+3, r24	; 0x03
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	9c 81       	ldd	r25, Y+4	; 0x04
     e42:	01 97       	sbiw	r24, 0x01	; 1
     e44:	f1 f7       	brne	.-4      	; 0xe42 <get_password+0x1d6>
     e46:	9c 83       	std	Y+4, r25	; 0x04
     e48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e4a:	8d 81       	ldd	r24, Y+5	; 0x05
     e4c:	9e 81       	ldd	r25, Y+6	; 0x06
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	9e 83       	std	Y+6, r25	; 0x06
     e52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e54:	8d 81       	ldd	r24, Y+5	; 0x05
     e56:	9e 81       	ldd	r25, Y+6	; 0x06
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	69 f7       	brne	.-38     	; 0xe36 <get_password+0x1ca>
     e5c:	14 c0       	rjmp	.+40     	; 0xe86 <get_password+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e5e:	6f 81       	ldd	r22, Y+7	; 0x07
     e60:	78 85       	ldd	r23, Y+8	; 0x08
     e62:	89 85       	ldd	r24, Y+9	; 0x09
     e64:	9a 85       	ldd	r25, Y+10	; 0x0a
     e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	9e 83       	std	Y+6, r25	; 0x06
     e70:	8d 83       	std	Y+5, r24	; 0x05
     e72:	8d 81       	ldd	r24, Y+5	; 0x05
     e74:	9e 81       	ldd	r25, Y+6	; 0x06
     e76:	9a 83       	std	Y+2, r25	; 0x02
     e78:	89 83       	std	Y+1, r24	; 0x01
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	9a 81       	ldd	r25, Y+2	; 0x02
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	f1 f7       	brne	.-4      	; 0xe7e <get_password+0x212>
     e82:	9a 83       	std	Y+2, r25	; 0x02
     e84:	89 83       	std	Y+1, r24	; 0x01
		g_step++;
	}
}
void get_password(uint8 password[])
{
	for (uint8 i=0;i<5;i++)
     e86:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e88:	8f 5f       	subi	r24, 0xFF	; 255
     e8a:	8d 8f       	std	Y+29, r24	; 0x1d
     e8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e8e:	85 30       	cpi	r24, 0x05	; 5
     e90:	08 f4       	brcc	.+2      	; 0xe94 <get_password+0x228>
     e92:	fa ce       	rjmp	.-524    	; 0xc88 <get_password+0x1c>
		{
			LCD_displayCharacter('*');
		}
		_delay_ms(delay); /* Press time */
	}
}
     e94:	6f 96       	adiw	r28, 0x1f	; 31
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <passwords_is_equal>:

boolean passwords_is_equal(uint8 password_1[],uint8 password_2[])
{
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	00 d0       	rcall	.+0      	; 0xeac <passwords_is_equal+0x6>
     eac:	00 d0       	rcall	.+0      	; 0xeae <passwords_is_equal+0x8>
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <passwords_is_equal+0xa>
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	9c 83       	std	Y+4, r25	; 0x04
     eb6:	8b 83       	std	Y+3, r24	; 0x03
     eb8:	7e 83       	std	Y+6, r23	; 0x06
     eba:	6d 83       	std	Y+5, r22	; 0x05
	boolean flag;
	for (uint8 i=0;i<5;i++)
     ebc:	19 82       	std	Y+1, r1	; 0x01
     ebe:	1c c0       	rjmp	.+56     	; 0xef8 <passwords_is_equal+0x52>
	{
		if (password_1[i]==password_2[i])
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	9c 81       	ldd	r25, Y+4	; 0x04
     eca:	fc 01       	movw	r30, r24
     ecc:	e2 0f       	add	r30, r18
     ece:	f3 1f       	adc	r31, r19
     ed0:	40 81       	ld	r20, Z
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	8d 81       	ldd	r24, Y+5	; 0x05
     eda:	9e 81       	ldd	r25, Y+6	; 0x06
     edc:	fc 01       	movw	r30, r24
     ede:	e2 0f       	add	r30, r18
     ee0:	f3 1f       	adc	r31, r19
     ee2:	80 81       	ld	r24, Z
     ee4:	48 17       	cp	r20, r24
     ee6:	31 f4       	brne	.+12     	; 0xef4 <passwords_is_equal+0x4e>
		{
			flag = TRUE;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	8a 83       	std	Y+2, r24	; 0x02
}

boolean passwords_is_equal(uint8 password_1[],uint8 password_2[])
{
	boolean flag;
	for (uint8 i=0;i<5;i++)
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	8f 5f       	subi	r24, 0xFF	; 255
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <passwords_is_equal+0x52>
		{
			flag = TRUE;
		}
		else
		{
			flag = FALSE;
     ef4:	1a 82       	std	Y+2, r1	; 0x02
     ef6:	03 c0       	rjmp	.+6      	; 0xefe <passwords_is_equal+0x58>
}

boolean passwords_is_equal(uint8 password_1[],uint8 password_2[])
{
	boolean flag;
	for (uint8 i=0;i<5;i++)
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	85 30       	cpi	r24, 0x05	; 5
     efc:	08 f3       	brcs	.-62     	; 0xec0 <passwords_is_equal+0x1a>
		{
			flag = FALSE;
			break;
		}
	}
	return flag;
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f00:	26 96       	adiw	r28, 0x06	; 6
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <send_password>:

void send_password(uint8 * password)
{
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	00 d0       	rcall	.+0      	; 0xf18 <send_password+0x6>
     f18:	0f 92       	push	r0
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	9b 83       	std	Y+3, r25	; 0x03
     f20:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Synchronize 2 MCUs
	 */
	UART_sendByte(MC1_READY);
     f22:	8f e1       	ldi	r24, 0x1F	; 31
     f24:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <UART_sendByte>
	while(UART_recieveByte() != MC2_READY){}
     f28:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <UART_recieveByte>
     f2c:	80 31       	cpi	r24, 0x10	; 16
     f2e:	e1 f7       	brne	.-8      	; 0xf28 <send_password+0x16>
	for (uint8 i=0;i<5;i++)
     f30:	19 82       	std	Y+1, r1	; 0x01
     f32:	0e c0       	rjmp	.+28     	; 0xf50 <send_password+0x3e>
	{
		UART_sendByte(password[i]);
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	9b 81       	ldd	r25, Y+3	; 0x03
     f3e:	fc 01       	movw	r30, r24
     f40:	e2 0f       	add	r30, r18
     f42:	f3 1f       	adc	r31, r19
     f44:	80 81       	ld	r24, Z
     f46:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <UART_sendByte>
	/*
	 * Synchronize 2 MCUs
	 */
	UART_sendByte(MC1_READY);
	while(UART_recieveByte() != MC2_READY){}
	for (uint8 i=0;i<5;i++)
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	8f 5f       	subi	r24, 0xFF	; 255
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	85 30       	cpi	r24, 0x05	; 5
     f54:	78 f3       	brcs	.-34     	; 0xf34 <send_password+0x22>
	{
		UART_sendByte(password[i]);
	}
}
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <display_password>:

void display_password(uint8 password[])
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	00 d0       	rcall	.+0      	; 0xf68 <display_password+0x6>
     f68:	0f 92       	push	r0
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	9b 83       	std	Y+3, r25	; 0x03
     f70:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8 i=0;i<5;i++)
     f72:	19 82       	std	Y+1, r1	; 0x01
     f74:	10 c0       	rjmp	.+32     	; 0xf96 <display_password+0x34>
	{
		LCD_intgerToString(password[i]);
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	9b 81       	ldd	r25, Y+3	; 0x03
     f80:	fc 01       	movw	r30, r24
     f82:	e2 0f       	add	r30, r18
     f84:	f3 1f       	adc	r31, r19
     f86:	80 81       	ld	r24, Z
     f88:	88 2f       	mov	r24, r24
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <LCD_intgerToString>
	}
}

void display_password(uint8 password[])
{
	for (uint8 i=0;i<5;i++)
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	8f 5f       	subi	r24, 0xFF	; 255
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	85 30       	cpi	r24, 0x05	; 5
     f9a:	68 f3       	brcs	.-38     	; 0xf76 <display_password+0x14>
	{
		LCD_intgerToString(password[i]);
	}
}
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <Timer1_callBack>:

void Timer1_callBack(void)
{
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
	g_timerCount++;
     fb0:	80 91 f6 00 	lds	r24, 0x00F6
     fb4:	8f 5f       	subi	r24, 0xFF	; 255
     fb6:	80 93 f6 00 	sts	0x00F6, r24
}
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <main>:

int main()
{
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	c3 56       	subi	r28, 0x63	; 99
     fce:	d0 40       	sbci	r29, 0x00	; 0
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
	 * COMPARE Mode with interrupt every 3 Seconds
	 * System Clock = 8Mhz and PRESCALER F_CPU/1024.
	 * Timer frequency will be around 7.8Khz, T_timer = 128us
	 * For compare value equals to 23437 the timer will generate compare match interrupt every 3 Seconds.
	 * */
	Timer1_ConfigType Timer_1_Config = {0,23437,PRESCALER_1024,COMPARE_MODE};
     fda:	ce 01       	movw	r24, r28
     fdc:	85 5b       	subi	r24, 0xB5	; 181
     fde:	9f 4f       	sbci	r25, 0xFF	; 255
     fe0:	6c 96       	adiw	r28, 0x1c	; 28
     fe2:	9f af       	std	Y+63, r25	; 0x3f
     fe4:	8e af       	std	Y+62, r24	; 0x3e
     fe6:	6c 97       	sbiw	r28, 0x1c	; 28
     fe8:	2f ee       	ldi	r18, 0xEF	; 239
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	6e 96       	adiw	r28, 0x1e	; 30
     fee:	3f af       	std	Y+63, r19	; 0x3f
     ff0:	2e af       	std	Y+62, r18	; 0x3e
     ff2:	6e 97       	sbiw	r28, 0x1e	; 30
     ff4:	36 e0       	ldi	r19, 0x06	; 6
     ff6:	6f 96       	adiw	r28, 0x1f	; 31
     ff8:	3f af       	std	Y+63, r19	; 0x3f
     ffa:	6f 97       	sbiw	r28, 0x1f	; 31
     ffc:	6e 96       	adiw	r28, 0x1e	; 30
     ffe:	ee ad       	ldd	r30, Y+62	; 0x3e
    1000:	ff ad       	ldd	r31, Y+63	; 0x3f
    1002:	6e 97       	sbiw	r28, 0x1e	; 30
    1004:	00 80       	ld	r0, Z
    1006:	6e 96       	adiw	r28, 0x1e	; 30
    1008:	2e ad       	ldd	r18, Y+62	; 0x3e
    100a:	3f ad       	ldd	r19, Y+63	; 0x3f
    100c:	6e 97       	sbiw	r28, 0x1e	; 30
    100e:	2f 5f       	subi	r18, 0xFF	; 255
    1010:	3f 4f       	sbci	r19, 0xFF	; 255
    1012:	6e 96       	adiw	r28, 0x1e	; 30
    1014:	3f af       	std	Y+63, r19	; 0x3f
    1016:	2e af       	std	Y+62, r18	; 0x3e
    1018:	6e 97       	sbiw	r28, 0x1e	; 30
    101a:	6c 96       	adiw	r28, 0x1c	; 28
    101c:	ee ad       	ldd	r30, Y+62	; 0x3e
    101e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1020:	6c 97       	sbiw	r28, 0x1c	; 28
    1022:	00 82       	st	Z, r0
    1024:	6c 96       	adiw	r28, 0x1c	; 28
    1026:	2e ad       	ldd	r18, Y+62	; 0x3e
    1028:	3f ad       	ldd	r19, Y+63	; 0x3f
    102a:	6c 97       	sbiw	r28, 0x1c	; 28
    102c:	2f 5f       	subi	r18, 0xFF	; 255
    102e:	3f 4f       	sbci	r19, 0xFF	; 255
    1030:	6c 96       	adiw	r28, 0x1c	; 28
    1032:	3f af       	std	Y+63, r19	; 0x3f
    1034:	2e af       	std	Y+62, r18	; 0x3e
    1036:	6c 97       	sbiw	r28, 0x1c	; 28
    1038:	6f 96       	adiw	r28, 0x1f	; 31
    103a:	3f ad       	ldd	r19, Y+63	; 0x3f
    103c:	6f 97       	sbiw	r28, 0x1f	; 31
    103e:	31 50       	subi	r19, 0x01	; 1
    1040:	6f 96       	adiw	r28, 0x1f	; 31
    1042:	3f af       	std	Y+63, r19	; 0x3f
    1044:	6f 97       	sbiw	r28, 0x1f	; 31
    1046:	6f 96       	adiw	r28, 0x1f	; 31
    1048:	8f ad       	ldd	r24, Y+63	; 0x3f
    104a:	6f 97       	sbiw	r28, 0x1f	; 31
    104c:	88 23       	and	r24, r24
    104e:	b1 f6       	brne	.-84     	; 0xffc <main+0x3c>
	/* Set the Call back function pointer in the Timer 1 driver */
	Timer1_setCallBack(Timer1_callBack);
    1050:	84 ed       	ldi	r24, 0xD4	; 212
    1052:	97 e0       	ldi	r25, 0x07	; 7
    1054:	0e 94 18 18 	call	0x3030	; 0x3030 <Timer1_setCallBack>

	/* Create configuration structure for UART driver */
	UART_ConfigType UART_Config = {EIGHT_BITS,DISABLED,ONE_BIT,9600};
    1058:	ce 01       	movw	r24, r28
    105a:	8f 5a       	subi	r24, 0xAF	; 175
    105c:	9f 4f       	sbci	r25, 0xFF	; 255
    105e:	a1 96       	adiw	r28, 0x21	; 33
    1060:	9f af       	std	Y+63, r25	; 0x3f
    1062:	8e af       	std	Y+62, r24	; 0x3e
    1064:	a1 97       	sbiw	r28, 0x21	; 33
    1066:	e8 ee       	ldi	r30, 0xE8	; 232
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	a3 96       	adiw	r28, 0x23	; 35
    106c:	ff af       	std	Y+63, r31	; 0x3f
    106e:	ee af       	std	Y+62, r30	; 0x3e
    1070:	a3 97       	sbiw	r28, 0x23	; 35
    1072:	f7 e0       	ldi	r31, 0x07	; 7
    1074:	a4 96       	adiw	r28, 0x24	; 36
    1076:	ff af       	std	Y+63, r31	; 0x3f
    1078:	a4 97       	sbiw	r28, 0x24	; 36
    107a:	a3 96       	adiw	r28, 0x23	; 35
    107c:	ee ad       	ldd	r30, Y+62	; 0x3e
    107e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1080:	a3 97       	sbiw	r28, 0x23	; 35
    1082:	00 80       	ld	r0, Z
    1084:	a3 96       	adiw	r28, 0x23	; 35
    1086:	2e ad       	ldd	r18, Y+62	; 0x3e
    1088:	3f ad       	ldd	r19, Y+63	; 0x3f
    108a:	a3 97       	sbiw	r28, 0x23	; 35
    108c:	2f 5f       	subi	r18, 0xFF	; 255
    108e:	3f 4f       	sbci	r19, 0xFF	; 255
    1090:	a3 96       	adiw	r28, 0x23	; 35
    1092:	3f af       	std	Y+63, r19	; 0x3f
    1094:	2e af       	std	Y+62, r18	; 0x3e
    1096:	a3 97       	sbiw	r28, 0x23	; 35
    1098:	a1 96       	adiw	r28, 0x21	; 33
    109a:	ee ad       	ldd	r30, Y+62	; 0x3e
    109c:	ff ad       	ldd	r31, Y+63	; 0x3f
    109e:	a1 97       	sbiw	r28, 0x21	; 33
    10a0:	00 82       	st	Z, r0
    10a2:	a1 96       	adiw	r28, 0x21	; 33
    10a4:	2e ad       	ldd	r18, Y+62	; 0x3e
    10a6:	3f ad       	ldd	r19, Y+63	; 0x3f
    10a8:	a1 97       	sbiw	r28, 0x21	; 33
    10aa:	2f 5f       	subi	r18, 0xFF	; 255
    10ac:	3f 4f       	sbci	r19, 0xFF	; 255
    10ae:	a1 96       	adiw	r28, 0x21	; 33
    10b0:	3f af       	std	Y+63, r19	; 0x3f
    10b2:	2e af       	std	Y+62, r18	; 0x3e
    10b4:	a1 97       	sbiw	r28, 0x21	; 33
    10b6:	a4 96       	adiw	r28, 0x24	; 36
    10b8:	3f ad       	ldd	r19, Y+63	; 0x3f
    10ba:	a4 97       	sbiw	r28, 0x24	; 36
    10bc:	31 50       	subi	r19, 0x01	; 1
    10be:	a4 96       	adiw	r28, 0x24	; 36
    10c0:	3f af       	std	Y+63, r19	; 0x3f
    10c2:	a4 97       	sbiw	r28, 0x24	; 36
    10c4:	a4 96       	adiw	r28, 0x24	; 36
    10c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    10c8:	a4 97       	sbiw	r28, 0x24	; 36
    10ca:	88 23       	and	r24, r24
    10cc:	b1 f6       	brne	.-84     	; 0x107a <main+0xba>
	/* Initialize the UART driver with UART_Config */
	UART_init(&UART_Config);
    10ce:	ce 01       	movw	r24, r28
    10d0:	8f 5a       	subi	r24, 0xAF	; 175
    10d2:	9f 4f       	sbci	r25, 0xFF	; 255
    10d4:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <UART_init>

	/* initialize LCD driver */
	LCD_init();
    10d8:	0e 94 f7 11 	call	0x23ee	; 0x23ee <LCD_init>

	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
    10dc:	af e5       	ldi	r26, 0x5F	; 95
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	ef e5       	ldi	r30, 0x5F	; 95
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	80 68       	ori	r24, 0x80	; 128
    10e8:	8c 93       	st	X, r24

	uint8 menu;
	uint8 count_wrong_password=0;
    10ea:	fe 01       	movw	r30, r28
    10ec:	e7 5b       	subi	r30, 0xB7	; 183
    10ee:	ff 4f       	sbci	r31, 0xFF	; 255
    10f0:	10 82       	st	Z, r1

	while(1)
	{
		switch (g_step)
    10f2:	80 91 e7 00 	lds	r24, 0x00E7
    10f6:	e8 2f       	mov	r30, r24
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	6a 96       	adiw	r28, 0x1a	; 26
    10fc:	ff af       	std	Y+63, r31	; 0x3f
    10fe:	ee af       	std	Y+62, r30	; 0x3e
    1100:	6a 97       	sbiw	r28, 0x1a	; 26
    1102:	6a 96       	adiw	r28, 0x1a	; 26
    1104:	2e ad       	ldd	r18, Y+62	; 0x3e
    1106:	3f ad       	ldd	r19, Y+63	; 0x3f
    1108:	6a 97       	sbiw	r28, 0x1a	; 26
    110a:	23 30       	cpi	r18, 0x03	; 3
    110c:	31 05       	cpc	r19, r1
    110e:	09 f4       	brne	.+2      	; 0x1112 <main+0x152>
    1110:	95 c1       	rjmp	.+810    	; 0x143c <main+0x47c>
    1112:	6a 96       	adiw	r28, 0x1a	; 26
    1114:	8e ad       	ldd	r24, Y+62	; 0x3e
    1116:	9f ad       	ldd	r25, Y+63	; 0x3f
    1118:	6a 97       	sbiw	r28, 0x1a	; 26
    111a:	84 30       	cpi	r24, 0x04	; 4
    111c:	91 05       	cpc	r25, r1
    111e:	84 f4       	brge	.+32     	; 0x1140 <main+0x180>
    1120:	6a 96       	adiw	r28, 0x1a	; 26
    1122:	ee ad       	ldd	r30, Y+62	; 0x3e
    1124:	ff ad       	ldd	r31, Y+63	; 0x3f
    1126:	6a 97       	sbiw	r28, 0x1a	; 26
    1128:	e1 30       	cpi	r30, 0x01	; 1
    112a:	f1 05       	cpc	r31, r1
    112c:	11 f1       	breq	.+68     	; 0x1172 <main+0x1b2>
    112e:	6a 96       	adiw	r28, 0x1a	; 26
    1130:	2e ad       	ldd	r18, Y+62	; 0x3e
    1132:	3f ad       	ldd	r19, Y+63	; 0x3f
    1134:	6a 97       	sbiw	r28, 0x1a	; 26
    1136:	22 30       	cpi	r18, 0x02	; 2
    1138:	31 05       	cpc	r19, r1
    113a:	09 f4       	brne	.+2      	; 0x113e <main+0x17e>
    113c:	c0 c0       	rjmp	.+384    	; 0x12be <main+0x2fe>
    113e:	bd c3       	rjmp	.+1914   	; 0x18ba <main+0x8fa>
    1140:	6a 96       	adiw	r28, 0x1a	; 26
    1142:	8e ad       	ldd	r24, Y+62	; 0x3e
    1144:	9f ad       	ldd	r25, Y+63	; 0x3f
    1146:	6a 97       	sbiw	r28, 0x1a	; 26
    1148:	85 30       	cpi	r24, 0x05	; 5
    114a:	91 05       	cpc	r25, r1
    114c:	09 f4       	brne	.+2      	; 0x1150 <main+0x190>
    114e:	6d c3       	rjmp	.+1754   	; 0x182a <main+0x86a>
    1150:	6a 96       	adiw	r28, 0x1a	; 26
    1152:	ee ad       	ldd	r30, Y+62	; 0x3e
    1154:	ff ad       	ldd	r31, Y+63	; 0x3f
    1156:	6a 97       	sbiw	r28, 0x1a	; 26
    1158:	e5 30       	cpi	r30, 0x05	; 5
    115a:	f1 05       	cpc	r31, r1
    115c:	0c f4       	brge	.+2      	; 0x1160 <main+0x1a0>
    115e:	1b c2       	rjmp	.+1078   	; 0x1596 <main+0x5d6>
    1160:	6a 96       	adiw	r28, 0x1a	; 26
    1162:	2e ad       	ldd	r18, Y+62	; 0x3e
    1164:	3f ad       	ldd	r19, Y+63	; 0x3f
    1166:	6a 97       	sbiw	r28, 0x1a	; 26
    1168:	26 30       	cpi	r18, 0x06	; 6
    116a:	31 05       	cpc	r19, r1
    116c:	09 f4       	brne	.+2      	; 0x1170 <main+0x1b0>
    116e:	8a c3       	rjmp	.+1812   	; 0x1884 <main+0x8c4>
    1170:	a4 c3       	rjmp	.+1864   	; 0x18ba <main+0x8fa>
		{
		/*get password case*/
		case 1:
			LCD_clearScreen();
    1172:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LCD_clearScreen>
			LCD_displayString("Plz Enter Pass:");
    1176:	80 e6       	ldi	r24, 0x60	; 96
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <LCD_displayString>
			/* Move the cursor to the second row*/
			LCD_moveCursor(1,0);
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_moveCursor>
			/* get first password from user and store it in g_first_password array*/
			get_password(first_pass);
    1186:	8e ef       	ldi	r24, 0xFE	; 254
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	0e 94 36 06 	call	0xc6c	; 0xc6c <get_password>
			key = KEYPAD_getPressedKey();
    118e:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <KEYPAD_getPressedKey>
    1192:	80 93 08 01 	sts	0x0108, r24
			/*Enter from on/c button on keypad*/
			/* check if Enter is pressed*/
			if (key == '#')
    1196:	80 91 08 01 	lds	r24, 0x0108
    119a:	83 32       	cpi	r24, 0x23	; 35
    119c:	09 f0       	breq	.+2      	; 0x11a0 <main+0x1e0>
    119e:	a9 cf       	rjmp	.-174    	; 0x10f2 <main+0x132>
    11a0:	fe 01       	movw	r30, r28
    11a2:	ed 5b       	subi	r30, 0xBD	; 189
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	a8 e4       	ldi	r26, 0x48	; 72
    11ac:	b3 e4       	ldi	r27, 0x43	; 67
    11ae:	80 83       	st	Z, r24
    11b0:	91 83       	std	Z+1, r25	; 0x01
    11b2:	a2 83       	std	Z+2, r26	; 0x02
    11b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b6:	8e 01       	movw	r16, r28
    11b8:	01 5c       	subi	r16, 0xC1	; 193
    11ba:	1f 4f       	sbci	r17, 0xFF	; 255
    11bc:	fe 01       	movw	r30, r28
    11be:	ed 5b       	subi	r30, 0xBD	; 189
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	60 81       	ld	r22, Z
    11c4:	71 81       	ldd	r23, Z+1	; 0x01
    11c6:	82 81       	ldd	r24, Z+2	; 0x02
    11c8:	93 81       	ldd	r25, Z+3	; 0x03
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	4a ef       	ldi	r20, 0xFA	; 250
    11d0:	54 e4       	ldi	r21, 0x44	; 68
    11d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	f8 01       	movw	r30, r16
    11dc:	80 83       	st	Z, r24
    11de:	91 83       	std	Z+1, r25	; 0x01
    11e0:	a2 83       	std	Z+2, r26	; 0x02
    11e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11e4:	fe 01       	movw	r30, r28
    11e6:	ff 96       	adiw	r30, 0x3f	; 63
    11e8:	60 81       	ld	r22, Z
    11ea:	71 81       	ldd	r23, Z+1	; 0x01
    11ec:	82 81       	ldd	r24, Z+2	; 0x02
    11ee:	93 81       	ldd	r25, Z+3	; 0x03
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 e8       	ldi	r20, 0x80	; 128
    11f6:	5f e3       	ldi	r21, 0x3F	; 63
    11f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11fc:	88 23       	and	r24, r24
    11fe:	2c f4       	brge	.+10     	; 0x120a <main+0x24a>
		__ticks = 1;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	9e af       	std	Y+62, r25	; 0x3e
    1206:	8d af       	std	Y+61, r24	; 0x3d
    1208:	46 c0       	rjmp	.+140    	; 0x1296 <main+0x2d6>
	else if (__tmp > 65535)
    120a:	fe 01       	movw	r30, r28
    120c:	ff 96       	adiw	r30, 0x3f	; 63
    120e:	60 81       	ld	r22, Z
    1210:	71 81       	ldd	r23, Z+1	; 0x01
    1212:	82 81       	ldd	r24, Z+2	; 0x02
    1214:	93 81       	ldd	r25, Z+3	; 0x03
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	3f ef       	ldi	r19, 0xFF	; 255
    121a:	4f e7       	ldi	r20, 0x7F	; 127
    121c:	57 e4       	ldi	r21, 0x47	; 71
    121e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1222:	18 16       	cp	r1, r24
    1224:	64 f5       	brge	.+88     	; 0x127e <main+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1226:	fe 01       	movw	r30, r28
    1228:	ed 5b       	subi	r30, 0xBD	; 189
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	60 81       	ld	r22, Z
    122e:	71 81       	ldd	r23, Z+1	; 0x01
    1230:	82 81       	ldd	r24, Z+2	; 0x02
    1232:	93 81       	ldd	r25, Z+3	; 0x03
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 e2       	ldi	r20, 0x20	; 32
    123a:	51 e4       	ldi	r21, 0x41	; 65
    123c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	bc 01       	movw	r22, r24
    1246:	cd 01       	movw	r24, r26
    1248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	9e af       	std	Y+62, r25	; 0x3e
    1252:	8d af       	std	Y+61, r24	; 0x3d
    1254:	0f c0       	rjmp	.+30     	; 0x1274 <main+0x2b4>
    1256:	88 ec       	ldi	r24, 0xC8	; 200
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	9c af       	std	Y+60, r25	; 0x3c
    125c:	8b af       	std	Y+59, r24	; 0x3b
    125e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1260:	9c ad       	ldd	r25, Y+60	; 0x3c
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	f1 f7       	brne	.-4      	; 0x1262 <main+0x2a2>
    1266:	9c af       	std	Y+60, r25	; 0x3c
    1268:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    126a:	8d ad       	ldd	r24, Y+61	; 0x3d
    126c:	9e ad       	ldd	r25, Y+62	; 0x3e
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	9e af       	std	Y+62, r25	; 0x3e
    1272:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1274:	8d ad       	ldd	r24, Y+61	; 0x3d
    1276:	9e ad       	ldd	r25, Y+62	; 0x3e
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	69 f7       	brne	.-38     	; 0x1256 <main+0x296>
    127c:	16 c0       	rjmp	.+44     	; 0x12aa <main+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    127e:	fe 01       	movw	r30, r28
    1280:	ff 96       	adiw	r30, 0x3f	; 63
    1282:	60 81       	ld	r22, Z
    1284:	71 81       	ldd	r23, Z+1	; 0x01
    1286:	82 81       	ldd	r24, Z+2	; 0x02
    1288:	93 81       	ldd	r25, Z+3	; 0x03
    128a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	9e af       	std	Y+62, r25	; 0x3e
    1294:	8d af       	std	Y+61, r24	; 0x3d
    1296:	8d ad       	ldd	r24, Y+61	; 0x3d
    1298:	9e ad       	ldd	r25, Y+62	; 0x3e
    129a:	9a af       	std	Y+58, r25	; 0x3a
    129c:	89 af       	std	Y+57, r24	; 0x39
    129e:	89 ad       	ldd	r24, Y+57	; 0x39
    12a0:	9a ad       	ldd	r25, Y+58	; 0x3a
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <main+0x2e2>
    12a6:	9a af       	std	Y+58, r25	; 0x3a
    12a8:	89 af       	std	Y+57, r24	; 0x39
			{
				_delay_ms(delay); /* Press time */
				/*
				 * Send First password to CONTROL MCU
				 */
				send_password(first_pass );
    12aa:	8e ef       	ldi	r24, 0xFE	; 254
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0e 94 89 07 	call	0xf12	; 0xf12 <send_password>
				g_step++;
    12b2:	80 91 e7 00 	lds	r24, 0x00E7
    12b6:	8f 5f       	subi	r24, 0xFF	; 255
    12b8:	80 93 e7 00 	sts	0x00E7, r24
    12bc:	1a cf       	rjmp	.-460    	; 0x10f2 <main+0x132>
			}
			break;
		/*confirm password case*/
		case 2:
			LCD_clearScreen();
    12be:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_moveCursor>
			LCD_displayStringRowColumn(0,0,"Plz re-enter the");
    12ca:	20 e7       	ldi	r18, 0x70	; 112
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	a9 01       	movw	r20, r18
    12d4:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"same Pass:");
    12d8:	21 e8       	ldi	r18, 0x81	; 129
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	a9 01       	movw	r20, r18
    12e2:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <LCD_displayStringRowColumn>
			/*Move the cursor to the second row*/
			LCD_moveCursor(1,11);
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	6b e0       	ldi	r22, 0x0B	; 11
    12ea:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_moveCursor>
			/* get second password from user and store it in g_second_password array*/
			get_password(second_pass);
    12ee:	83 e0       	ldi	r24, 0x03	; 3
    12f0:	91 e0       	ldi	r25, 0x01	; 1
    12f2:	0e 94 36 06 	call	0xc6c	; 0xc6c <get_password>
			key = KEYPAD_getPressedKey();
    12f6:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <KEYPAD_getPressedKey>
    12fa:	80 93 08 01 	sts	0x0108, r24
			if (key == '#')
    12fe:	80 91 08 01 	lds	r24, 0x0108
    1302:	83 32       	cpi	r24, 0x23	; 35
    1304:	09 f0       	breq	.+2      	; 0x1308 <main+0x348>
    1306:	f5 ce       	rjmp	.-534    	; 0x10f2 <main+0x132>
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	a8 e4       	ldi	r26, 0x48	; 72
    130e:	b3 e4       	ldi	r27, 0x43	; 67
    1310:	8d ab       	std	Y+53, r24	; 0x35
    1312:	9e ab       	std	Y+54, r25	; 0x36
    1314:	af ab       	std	Y+55, r26	; 0x37
    1316:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1318:	6d a9       	ldd	r22, Y+53	; 0x35
    131a:	7e a9       	ldd	r23, Y+54	; 0x36
    131c:	8f a9       	ldd	r24, Y+55	; 0x37
    131e:	98 ad       	ldd	r25, Y+56	; 0x38
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	4a ef       	ldi	r20, 0xFA	; 250
    1326:	54 e4       	ldi	r21, 0x44	; 68
    1328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	89 ab       	std	Y+49, r24	; 0x31
    1332:	9a ab       	std	Y+50, r25	; 0x32
    1334:	ab ab       	std	Y+51, r26	; 0x33
    1336:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1338:	69 a9       	ldd	r22, Y+49	; 0x31
    133a:	7a a9       	ldd	r23, Y+50	; 0x32
    133c:	8b a9       	ldd	r24, Y+51	; 0x33
    133e:	9c a9       	ldd	r25, Y+52	; 0x34
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e8       	ldi	r20, 0x80	; 128
    1346:	5f e3       	ldi	r21, 0x3F	; 63
    1348:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    134c:	88 23       	and	r24, r24
    134e:	2c f4       	brge	.+10     	; 0x135a <main+0x39a>
		__ticks = 1;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	98 ab       	std	Y+48, r25	; 0x30
    1356:	8f a7       	std	Y+47, r24	; 0x2f
    1358:	3f c0       	rjmp	.+126    	; 0x13d8 <main+0x418>
	else if (__tmp > 65535)
    135a:	69 a9       	ldd	r22, Y+49	; 0x31
    135c:	7a a9       	ldd	r23, Y+50	; 0x32
    135e:	8b a9       	ldd	r24, Y+51	; 0x33
    1360:	9c a9       	ldd	r25, Y+52	; 0x34
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	3f ef       	ldi	r19, 0xFF	; 255
    1366:	4f e7       	ldi	r20, 0x7F	; 127
    1368:	57 e4       	ldi	r21, 0x47	; 71
    136a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    136e:	18 16       	cp	r1, r24
    1370:	4c f5       	brge	.+82     	; 0x13c4 <main+0x404>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1372:	6d a9       	ldd	r22, Y+53	; 0x35
    1374:	7e a9       	ldd	r23, Y+54	; 0x36
    1376:	8f a9       	ldd	r24, Y+55	; 0x37
    1378:	98 ad       	ldd	r25, Y+56	; 0x38
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e2       	ldi	r20, 0x20	; 32
    1380:	51 e4       	ldi	r21, 0x41	; 65
    1382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	bc 01       	movw	r22, r24
    138c:	cd 01       	movw	r24, r26
    138e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	98 ab       	std	Y+48, r25	; 0x30
    1398:	8f a7       	std	Y+47, r24	; 0x2f
    139a:	0f c0       	rjmp	.+30     	; 0x13ba <main+0x3fa>
    139c:	88 ec       	ldi	r24, 0xC8	; 200
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	9e a7       	std	Y+46, r25	; 0x2e
    13a2:	8d a7       	std	Y+45, r24	; 0x2d
    13a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    13a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <main+0x3e8>
    13ac:	9e a7       	std	Y+46, r25	; 0x2e
    13ae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    13b2:	98 a9       	ldd	r25, Y+48	; 0x30
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	98 ab       	std	Y+48, r25	; 0x30
    13b8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    13bc:	98 a9       	ldd	r25, Y+48	; 0x30
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	69 f7       	brne	.-38     	; 0x139c <main+0x3dc>
    13c2:	14 c0       	rjmp	.+40     	; 0x13ec <main+0x42c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c4:	69 a9       	ldd	r22, Y+49	; 0x31
    13c6:	7a a9       	ldd	r23, Y+50	; 0x32
    13c8:	8b a9       	ldd	r24, Y+51	; 0x33
    13ca:	9c a9       	ldd	r25, Y+52	; 0x34
    13cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	98 ab       	std	Y+48, r25	; 0x30
    13d6:	8f a7       	std	Y+47, r24	; 0x2f
    13d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    13da:	98 a9       	ldd	r25, Y+48	; 0x30
    13dc:	9c a7       	std	Y+44, r25	; 0x2c
    13de:	8b a7       	std	Y+43, r24	; 0x2b
    13e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    13e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	f1 f7       	brne	.-4      	; 0x13e4 <main+0x424>
    13e8:	9c a7       	std	Y+44, r25	; 0x2c
    13ea:	8b a7       	std	Y+43, r24	; 0x2b
			{
				_delay_ms(delay); /* Press time */
				/*
				 * Send Second password to CONTROL MCU
				 */
				send_password(second_pass );
    13ec:	83 e0       	ldi	r24, 0x03	; 3
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	0e 94 89 07 	call	0xf12	; 0xf12 <send_password>
				while(UART_recieveByte() != MC2_READY){}
    13f4:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <UART_recieveByte>
    13f8:	80 31       	cpi	r24, 0x10	; 16
    13fa:	e1 f7       	brne	.-8      	; 0x13f4 <main+0x434>
				UART_sendByte(MC1_READY);
    13fc:	8f e1       	ldi	r24, 0x1F	; 31
    13fe:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <UART_sendByte>
				uint8 x = UART_recieveByte();
    1402:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <UART_recieveByte>
    1406:	fe 01       	movw	r30, r28
    1408:	e8 5b       	subi	r30, 0xB8	; 184
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	80 83       	st	Z, r24
				if(x==1)
    140e:	fe 01       	movw	r30, r28
    1410:	e8 5b       	subi	r30, 0xB8	; 184
    1412:	ff 4f       	sbci	r31, 0xFF	; 255
    1414:	80 81       	ld	r24, Z
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	31 f4       	brne	.+12     	; 0x1426 <main+0x466>
				{
					g_step++;
    141a:	80 91 e7 00 	lds	r24, 0x00E7
    141e:	8f 5f       	subi	r24, 0xFF	; 255
    1420:	80 93 e7 00 	sts	0x00E7, r24
    1424:	66 ce       	rjmp	.-820    	; 0x10f2 <main+0x132>
				}
				else if(x==0)
    1426:	fe 01       	movw	r30, r28
    1428:	e8 5b       	subi	r30, 0xB8	; 184
    142a:	ff 4f       	sbci	r31, 0xFF	; 255
    142c:	80 81       	ld	r24, Z
    142e:	88 23       	and	r24, r24
    1430:	09 f0       	breq	.+2      	; 0x1434 <main+0x474>
    1432:	5f ce       	rjmp	.-834    	; 0x10f2 <main+0x132>
				{
					g_step=1;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	80 93 e7 00 	sts	0x00E7, r24
    143a:	5b ce       	rjmp	.-842    	; 0x10f2 <main+0x132>
				}
			}
			break;
		/* take main system option and sent it to CONTROL MCU*/
		case 3 :
			LCD_clearScreen();
    143c:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	60 e0       	ldi	r22, 0x00	; 0
    1444:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_moveCursor>
			LCD_displayString("+ : Open Door");
    1448:	8c e8       	ldi	r24, 0x8C	; 140
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <LCD_displayString>
			LCD_moveCursor(1,0);
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_moveCursor>
			LCD_displayString("- : Change Pass");
    1458:	8a e9       	ldi	r24, 0x9A	; 154
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <LCD_displayString>

			menu = KEYPAD_getPressedKey();
    1460:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <KEYPAD_getPressedKey>
    1464:	fe 01       	movw	r30, r28
    1466:	e6 5b       	subi	r30, 0xB6	; 182
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	80 83       	st	Z, r24
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a8 e4       	ldi	r26, 0x48	; 72
    1472:	b3 e4       	ldi	r27, 0x43	; 67
    1474:	8f a3       	std	Y+39, r24	; 0x27
    1476:	98 a7       	std	Y+40, r25	; 0x28
    1478:	a9 a7       	std	Y+41, r26	; 0x29
    147a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    147c:	6f a1       	ldd	r22, Y+39	; 0x27
    147e:	78 a5       	ldd	r23, Y+40	; 0x28
    1480:	89 a5       	ldd	r24, Y+41	; 0x29
    1482:	9a a5       	ldd	r25, Y+42	; 0x2a
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	4a ef       	ldi	r20, 0xFA	; 250
    148a:	54 e4       	ldi	r21, 0x44	; 68
    148c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	8b a3       	std	Y+35, r24	; 0x23
    1496:	9c a3       	std	Y+36, r25	; 0x24
    1498:	ad a3       	std	Y+37, r26	; 0x25
    149a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    149c:	6b a1       	ldd	r22, Y+35	; 0x23
    149e:	7c a1       	ldd	r23, Y+36	; 0x24
    14a0:	8d a1       	ldd	r24, Y+37	; 0x25
    14a2:	9e a1       	ldd	r25, Y+38	; 0x26
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	40 e8       	ldi	r20, 0x80	; 128
    14aa:	5f e3       	ldi	r21, 0x3F	; 63
    14ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b0:	88 23       	and	r24, r24
    14b2:	2c f4       	brge	.+10     	; 0x14be <main+0x4fe>
		__ticks = 1;
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	9a a3       	std	Y+34, r25	; 0x22
    14ba:	89 a3       	std	Y+33, r24	; 0x21
    14bc:	3f c0       	rjmp	.+126    	; 0x153c <main+0x57c>
	else if (__tmp > 65535)
    14be:	6b a1       	ldd	r22, Y+35	; 0x23
    14c0:	7c a1       	ldd	r23, Y+36	; 0x24
    14c2:	8d a1       	ldd	r24, Y+37	; 0x25
    14c4:	9e a1       	ldd	r25, Y+38	; 0x26
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	3f ef       	ldi	r19, 0xFF	; 255
    14ca:	4f e7       	ldi	r20, 0x7F	; 127
    14cc:	57 e4       	ldi	r21, 0x47	; 71
    14ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d2:	18 16       	cp	r1, r24
    14d4:	4c f5       	brge	.+82     	; 0x1528 <main+0x568>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d6:	6f a1       	ldd	r22, Y+39	; 0x27
    14d8:	78 a5       	ldd	r23, Y+40	; 0x28
    14da:	89 a5       	ldd	r24, Y+41	; 0x29
    14dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 e2       	ldi	r20, 0x20	; 32
    14e4:	51 e4       	ldi	r21, 0x41	; 65
    14e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	bc 01       	movw	r22, r24
    14f0:	cd 01       	movw	r24, r26
    14f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	9a a3       	std	Y+34, r25	; 0x22
    14fc:	89 a3       	std	Y+33, r24	; 0x21
    14fe:	0f c0       	rjmp	.+30     	; 0x151e <main+0x55e>
    1500:	88 ec       	ldi	r24, 0xC8	; 200
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	98 a3       	std	Y+32, r25	; 0x20
    1506:	8f 8f       	std	Y+31, r24	; 0x1f
    1508:	8f 8d       	ldd	r24, Y+31	; 0x1f
    150a:	98 a1       	ldd	r25, Y+32	; 0x20
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	f1 f7       	brne	.-4      	; 0x150c <main+0x54c>
    1510:	98 a3       	std	Y+32, r25	; 0x20
    1512:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1514:	89 a1       	ldd	r24, Y+33	; 0x21
    1516:	9a a1       	ldd	r25, Y+34	; 0x22
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	9a a3       	std	Y+34, r25	; 0x22
    151c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    151e:	89 a1       	ldd	r24, Y+33	; 0x21
    1520:	9a a1       	ldd	r25, Y+34	; 0x22
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	69 f7       	brne	.-38     	; 0x1500 <main+0x540>
    1526:	14 c0       	rjmp	.+40     	; 0x1550 <main+0x590>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1528:	6b a1       	ldd	r22, Y+35	; 0x23
    152a:	7c a1       	ldd	r23, Y+36	; 0x24
    152c:	8d a1       	ldd	r24, Y+37	; 0x25
    152e:	9e a1       	ldd	r25, Y+38	; 0x26
    1530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	9a a3       	std	Y+34, r25	; 0x22
    153a:	89 a3       	std	Y+33, r24	; 0x21
    153c:	89 a1       	ldd	r24, Y+33	; 0x21
    153e:	9a a1       	ldd	r25, Y+34	; 0x22
    1540:	9e 8f       	std	Y+30, r25	; 0x1e
    1542:	8d 8f       	std	Y+29, r24	; 0x1d
    1544:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1546:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	f1 f7       	brne	.-4      	; 0x1548 <main+0x588>
    154c:	9e 8f       	std	Y+30, r25	; 0x1e
    154e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(delay); /* Press time */
			if (menu == '+' || menu == '-')
    1550:	fe 01       	movw	r30, r28
    1552:	e6 5b       	subi	r30, 0xB6	; 182
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	80 81       	ld	r24, Z
    1558:	8b 32       	cpi	r24, 0x2B	; 43
    155a:	31 f0       	breq	.+12     	; 0x1568 <main+0x5a8>
    155c:	fe 01       	movw	r30, r28
    155e:	e6 5b       	subi	r30, 0xB6	; 182
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	80 81       	ld	r24, Z
    1564:	8d 32       	cpi	r24, 0x2D	; 45
    1566:	99 f4       	brne	.+38     	; 0x158e <main+0x5ce>
			{
				/*
				 * Synchronize 2 MCUs
				 */
				UART_sendByte(MC1_READY);
    1568:	8f e1       	ldi	r24, 0x1F	; 31
    156a:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <UART_sendByte>
				while(UART_recieveByte() != MC2_READY){}
    156e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <UART_recieveByte>
    1572:	80 31       	cpi	r24, 0x10	; 16
    1574:	e1 f7       	brne	.-8      	; 0x156e <main+0x5ae>
				UART_sendByte(menu);
    1576:	fe 01       	movw	r30, r28
    1578:	e6 5b       	subi	r30, 0xB6	; 182
    157a:	ff 4f       	sbci	r31, 0xFF	; 255
    157c:	80 81       	ld	r24, Z
    157e:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <UART_sendByte>
				g_step++;
    1582:	80 91 e7 00 	lds	r24, 0x00E7
    1586:	8f 5f       	subi	r24, 0xFF	; 255
    1588:	80 93 e7 00 	sts	0x00E7, r24
    158c:	b2 cd       	rjmp	.-1180   	; 0x10f2 <main+0x132>
			}
			else
			{
				g_step=3;
    158e:	83 e0       	ldi	r24, 0x03	; 3
    1590:	80 93 e7 00 	sts	0x00E7, r24
    1594:	ae cd       	rjmp	.-1188   	; 0x10f2 <main+0x132>
			}
			break;
		/* Send and check password option case */
		case 4:
			LCD_clearScreen();
    1596:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_moveCursor>
			LCD_displayString("Plz Enter Pass:");
    15a2:	80 e6       	ldi	r24, 0x60	; 96
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <LCD_displayString>
			/* Move the cursor to the second row*/
			LCD_moveCursor(1,0);
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_moveCursor>
			/* get first password from user and store it in g_first_password array*/
			get_password(password);
    15b2:	89 ef       	ldi	r24, 0xF9	; 249
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	0e 94 36 06 	call	0xc6c	; 0xc6c <get_password>
			key = KEYPAD_getPressedKey();
    15ba:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <KEYPAD_getPressedKey>
    15be:	80 93 08 01 	sts	0x0108, r24
			if (key == '#')
    15c2:	80 91 08 01 	lds	r24, 0x0108
    15c6:	83 32       	cpi	r24, 0x23	; 35
    15c8:	09 f0       	breq	.+2      	; 0x15cc <main+0x60c>
    15ca:	93 cd       	rjmp	.-1242   	; 0x10f2 <main+0x132>
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	a8 e4       	ldi	r26, 0x48	; 72
    15d2:	b3 e4       	ldi	r27, 0x43	; 67
    15d4:	89 8f       	std	Y+25, r24	; 0x19
    15d6:	9a 8f       	std	Y+26, r25	; 0x1a
    15d8:	ab 8f       	std	Y+27, r26	; 0x1b
    15da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15dc:	69 8d       	ldd	r22, Y+25	; 0x19
    15de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	4a ef       	ldi	r20, 0xFA	; 250
    15ea:	54 e4       	ldi	r21, 0x44	; 68
    15ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	8d 8b       	std	Y+21, r24	; 0x15
    15f6:	9e 8b       	std	Y+22, r25	; 0x16
    15f8:	af 8b       	std	Y+23, r26	; 0x17
    15fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15fc:	6d 89       	ldd	r22, Y+21	; 0x15
    15fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1600:	8f 89       	ldd	r24, Y+23	; 0x17
    1602:	98 8d       	ldd	r25, Y+24	; 0x18
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e8       	ldi	r20, 0x80	; 128
    160a:	5f e3       	ldi	r21, 0x3F	; 63
    160c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1610:	88 23       	and	r24, r24
    1612:	2c f4       	brge	.+10     	; 0x161e <main+0x65e>
		__ticks = 1;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	9c 8b       	std	Y+20, r25	; 0x14
    161a:	8b 8b       	std	Y+19, r24	; 0x13
    161c:	3f c0       	rjmp	.+126    	; 0x169c <main+0x6dc>
	else if (__tmp > 65535)
    161e:	6d 89       	ldd	r22, Y+21	; 0x15
    1620:	7e 89       	ldd	r23, Y+22	; 0x16
    1622:	8f 89       	ldd	r24, Y+23	; 0x17
    1624:	98 8d       	ldd	r25, Y+24	; 0x18
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	3f ef       	ldi	r19, 0xFF	; 255
    162a:	4f e7       	ldi	r20, 0x7F	; 127
    162c:	57 e4       	ldi	r21, 0x47	; 71
    162e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1632:	18 16       	cp	r1, r24
    1634:	4c f5       	brge	.+82     	; 0x1688 <main+0x6c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1636:	69 8d       	ldd	r22, Y+25	; 0x19
    1638:	7a 8d       	ldd	r23, Y+26	; 0x1a
    163a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    163c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e2       	ldi	r20, 0x20	; 32
    1644:	51 e4       	ldi	r21, 0x41	; 65
    1646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	bc 01       	movw	r22, r24
    1650:	cd 01       	movw	r24, r26
    1652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	9c 8b       	std	Y+20, r25	; 0x14
    165c:	8b 8b       	std	Y+19, r24	; 0x13
    165e:	0f c0       	rjmp	.+30     	; 0x167e <main+0x6be>
    1660:	88 ec       	ldi	r24, 0xC8	; 200
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	9a 8b       	std	Y+18, r25	; 0x12
    1666:	89 8b       	std	Y+17, r24	; 0x11
    1668:	89 89       	ldd	r24, Y+17	; 0x11
    166a:	9a 89       	ldd	r25, Y+18	; 0x12
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	f1 f7       	brne	.-4      	; 0x166c <main+0x6ac>
    1670:	9a 8b       	std	Y+18, r25	; 0x12
    1672:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1674:	8b 89       	ldd	r24, Y+19	; 0x13
    1676:	9c 89       	ldd	r25, Y+20	; 0x14
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	9c 8b       	std	Y+20, r25	; 0x14
    167c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167e:	8b 89       	ldd	r24, Y+19	; 0x13
    1680:	9c 89       	ldd	r25, Y+20	; 0x14
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	69 f7       	brne	.-38     	; 0x1660 <main+0x6a0>
    1686:	14 c0       	rjmp	.+40     	; 0x16b0 <main+0x6f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1688:	6d 89       	ldd	r22, Y+21	; 0x15
    168a:	7e 89       	ldd	r23, Y+22	; 0x16
    168c:	8f 89       	ldd	r24, Y+23	; 0x17
    168e:	98 8d       	ldd	r25, Y+24	; 0x18
    1690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	9c 8b       	std	Y+20, r25	; 0x14
    169a:	8b 8b       	std	Y+19, r24	; 0x13
    169c:	8b 89       	ldd	r24, Y+19	; 0x13
    169e:	9c 89       	ldd	r25, Y+20	; 0x14
    16a0:	98 8b       	std	Y+16, r25	; 0x10
    16a2:	8f 87       	std	Y+15, r24	; 0x0f
    16a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    16a6:	98 89       	ldd	r25, Y+16	; 0x10
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	f1 f7       	brne	.-4      	; 0x16a8 <main+0x6e8>
    16ac:	98 8b       	std	Y+16, r25	; 0x10
    16ae:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(delay); /* Press time */

				send_password( password );
    16b0:	89 ef       	ldi	r24, 0xF9	; 249
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	0e 94 89 07 	call	0xf12	; 0xf12 <send_password>
				while(UART_recieveByte() != MC2_READY){}
    16b8:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <UART_recieveByte>
    16bc:	80 31       	cpi	r24, 0x10	; 16
    16be:	e1 f7       	brne	.-8      	; 0x16b8 <main+0x6f8>
				UART_sendByte(MC1_READY);
    16c0:	8f e1       	ldi	r24, 0x1F	; 31
    16c2:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <UART_sendByte>
				uint8 RECEIVED = UART_recieveByte();
    16c6:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <UART_recieveByte>
    16ca:	fe 01       	movw	r30, r28
    16cc:	e9 5b       	subi	r30, 0xB9	; 185
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	80 83       	st	Z, r24
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	a8 e4       	ldi	r26, 0x48	; 72
    16d8:	b2 e4       	ldi	r27, 0x42	; 66
    16da:	8b 87       	std	Y+11, r24	; 0x0b
    16dc:	9c 87       	std	Y+12, r25	; 0x0c
    16de:	ad 87       	std	Y+13, r26	; 0x0d
    16e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	4a ef       	ldi	r20, 0xFA	; 250
    16f0:	54 e4       	ldi	r21, 0x44	; 68
    16f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	8f 83       	std	Y+7, r24	; 0x07
    16fc:	98 87       	std	Y+8, r25	; 0x08
    16fe:	a9 87       	std	Y+9, r26	; 0x09
    1700:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1702:	6f 81       	ldd	r22, Y+7	; 0x07
    1704:	78 85       	ldd	r23, Y+8	; 0x08
    1706:	89 85       	ldd	r24, Y+9	; 0x09
    1708:	9a 85       	ldd	r25, Y+10	; 0x0a
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	40 e8       	ldi	r20, 0x80	; 128
    1710:	5f e3       	ldi	r21, 0x3F	; 63
    1712:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1716:	88 23       	and	r24, r24
    1718:	2c f4       	brge	.+10     	; 0x1724 <main+0x764>
		__ticks = 1;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	9e 83       	std	Y+6, r25	; 0x06
    1720:	8d 83       	std	Y+5, r24	; 0x05
    1722:	3f c0       	rjmp	.+126    	; 0x17a2 <main+0x7e2>
	else if (__tmp > 65535)
    1724:	6f 81       	ldd	r22, Y+7	; 0x07
    1726:	78 85       	ldd	r23, Y+8	; 0x08
    1728:	89 85       	ldd	r24, Y+9	; 0x09
    172a:	9a 85       	ldd	r25, Y+10	; 0x0a
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	3f ef       	ldi	r19, 0xFF	; 255
    1730:	4f e7       	ldi	r20, 0x7F	; 127
    1732:	57 e4       	ldi	r21, 0x47	; 71
    1734:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1738:	18 16       	cp	r1, r24
    173a:	4c f5       	brge	.+82     	; 0x178e <main+0x7ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173c:	6b 85       	ldd	r22, Y+11	; 0x0b
    173e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1740:	8d 85       	ldd	r24, Y+13	; 0x0d
    1742:	9e 85       	ldd	r25, Y+14	; 0x0e
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e2       	ldi	r20, 0x20	; 32
    174a:	51 e4       	ldi	r21, 0x41	; 65
    174c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	bc 01       	movw	r22, r24
    1756:	cd 01       	movw	r24, r26
    1758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	9e 83       	std	Y+6, r25	; 0x06
    1762:	8d 83       	std	Y+5, r24	; 0x05
    1764:	0f c0       	rjmp	.+30     	; 0x1784 <main+0x7c4>
    1766:	88 ec       	ldi	r24, 0xC8	; 200
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	9c 83       	std	Y+4, r25	; 0x04
    176c:	8b 83       	std	Y+3, r24	; 0x03
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	9c 81       	ldd	r25, Y+4	; 0x04
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	f1 f7       	brne	.-4      	; 0x1772 <main+0x7b2>
    1776:	9c 83       	std	Y+4, r25	; 0x04
    1778:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177a:	8d 81       	ldd	r24, Y+5	; 0x05
    177c:	9e 81       	ldd	r25, Y+6	; 0x06
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	9e 83       	std	Y+6, r25	; 0x06
    1782:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1784:	8d 81       	ldd	r24, Y+5	; 0x05
    1786:	9e 81       	ldd	r25, Y+6	; 0x06
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	69 f7       	brne	.-38     	; 0x1766 <main+0x7a6>
    178c:	14 c0       	rjmp	.+40     	; 0x17b6 <main+0x7f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    178e:	6f 81       	ldd	r22, Y+7	; 0x07
    1790:	78 85       	ldd	r23, Y+8	; 0x08
    1792:	89 85       	ldd	r24, Y+9	; 0x09
    1794:	9a 85       	ldd	r25, Y+10	; 0x0a
    1796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	9e 83       	std	Y+6, r25	; 0x06
    17a0:	8d 83       	std	Y+5, r24	; 0x05
    17a2:	8d 81       	ldd	r24, Y+5	; 0x05
    17a4:	9e 81       	ldd	r25, Y+6	; 0x06
    17a6:	9a 83       	std	Y+2, r25	; 0x02
    17a8:	89 83       	std	Y+1, r24	; 0x01
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	9a 81       	ldd	r25, Y+2	; 0x02
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	f1 f7       	brne	.-4      	; 0x17ae <main+0x7ee>
    17b2:	9a 83       	std	Y+2, r25	; 0x02
    17b4:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50);
				if(RECEIVED==1)
    17b6:	fe 01       	movw	r30, r28
    17b8:	e9 5b       	subi	r30, 0xB9	; 185
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	80 81       	ld	r24, Z
    17be:	81 30       	cpi	r24, 0x01	; 1
    17c0:	c9 f4       	brne	.+50     	; 0x17f4 <main+0x834>
				{
					count_wrong_password=0;
    17c2:	fe 01       	movw	r30, r28
    17c4:	e7 5b       	subi	r30, 0xB7	; 183
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	10 82       	st	Z, r1
					if (menu =='+')
    17ca:	fe 01       	movw	r30, r28
    17cc:	e6 5b       	subi	r30, 0xB6	; 182
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	80 81       	ld	r24, Z
    17d2:	8b 32       	cpi	r24, 0x2B	; 43
    17d4:	21 f4       	brne	.+8      	; 0x17de <main+0x81e>
					{
						g_step=5;
    17d6:	85 e0       	ldi	r24, 0x05	; 5
    17d8:	80 93 e7 00 	sts	0x00E7, r24
    17dc:	8a cc       	rjmp	.-1772   	; 0x10f2 <main+0x132>
					}
					else if(menu == '-')
    17de:	fe 01       	movw	r30, r28
    17e0:	e6 5b       	subi	r30, 0xB6	; 182
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	80 81       	ld	r24, Z
    17e6:	8d 32       	cpi	r24, 0x2D	; 45
    17e8:	09 f0       	breq	.+2      	; 0x17ec <main+0x82c>
    17ea:	83 cc       	rjmp	.-1786   	; 0x10f2 <main+0x132>
					{
						g_step=1;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	80 93 e7 00 	sts	0x00E7, r24
    17f2:	7f cc       	rjmp	.-1794   	; 0x10f2 <main+0x132>
					}
				}
				else if(RECEIVED==0)
    17f4:	fe 01       	movw	r30, r28
    17f6:	e9 5b       	subi	r30, 0xB9	; 185
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	80 81       	ld	r24, Z
    17fc:	88 23       	and	r24, r24
    17fe:	09 f0       	breq	.+2      	; 0x1802 <main+0x842>
    1800:	78 cc       	rjmp	.-1808   	; 0x10f2 <main+0x132>
				{
					count_wrong_password++;
    1802:	de 01       	movw	r26, r28
    1804:	a7 5b       	subi	r26, 0xB7	; 183
    1806:	bf 4f       	sbci	r27, 0xFF	; 255
    1808:	fe 01       	movw	r30, r28
    180a:	e7 5b       	subi	r30, 0xB7	; 183
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	80 81       	ld	r24, Z
    1810:	8f 5f       	subi	r24, 0xFF	; 255
    1812:	8c 93       	st	X, r24
					if(count_wrong_password==3)
    1814:	fe 01       	movw	r30, r28
    1816:	e7 5b       	subi	r30, 0xB7	; 183
    1818:	ff 4f       	sbci	r31, 0xFF	; 255
    181a:	80 81       	ld	r24, Z
    181c:	83 30       	cpi	r24, 0x03	; 3
    181e:	09 f0       	breq	.+2      	; 0x1822 <main+0x862>
    1820:	68 cc       	rjmp	.-1840   	; 0x10f2 <main+0x132>
					{
						g_step=6;
    1822:	86 e0       	ldi	r24, 0x06	; 6
    1824:	80 93 e7 00 	sts	0x00E7, r24
    1828:	64 cc       	rjmp	.-1848   	; 0x10f2 <main+0x132>
			}
			break;
			/* open door case*/
		case 5:

			LCD_clearScreen();
    182a:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Door is");
    182e:	2a ea       	ldi	r18, 0xAA	; 170
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	60 e0       	ldi	r22, 0x00	; 0
    1836:	a9 01       	movw	r20, r18
    1838:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"Unlocking");
    183c:	22 eb       	ldi	r18, 0xB2	; 178
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	a9 01       	movw	r20, r18
    1846:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <LCD_displayStringRowColumn>
			/* Initialize the Timer 1 Driver */
			Timer1_init(&Timer_1_Config);
    184a:	ce 01       	movw	r24, r28
    184c:	85 5b       	subi	r24, 0xB5	; 181
    184e:	9f 4f       	sbci	r25, 0xFF	; 255
    1850:	0e 94 92 17 	call	0x2f24	; 0x2f24 <Timer1_init>
			/*
			 *  Stop the motor after 15 seconds
			 * (5 timer interrupts)(3*5=15)
			 */
			while(g_timerCount < 6);
    1854:	80 91 f6 00 	lds	r24, 0x00F6
    1858:	86 30       	cpi	r24, 0x06	; 6
    185a:	e0 f3       	brcs	.-8      	; 0x1854 <main+0x894>
			LCD_clearScreen();
    185c:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LCD_clearScreen>
			LCD_displayString("Door is Locking");
    1860:	8c eb       	ldi	r24, 0xBC	; 188
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <LCD_displayString>
			g_timerCount=0;
    1868:	10 92 f6 00 	sts	0x00F6, r1
			while(g_timerCount < 5);
    186c:	80 91 f6 00 	lds	r24, 0x00F6
    1870:	85 30       	cpi	r24, 0x05	; 5
    1872:	e0 f3       	brcs	.-8      	; 0x186c <main+0x8ac>
			Timer1_deInit();
    1874:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <Timer1_deInit>
			g_timerCount=0;
    1878:	10 92 f6 00 	sts	0x00F6, r1
			g_step=3;
    187c:	83 e0       	ldi	r24, 0x03	; 3
    187e:	80 93 e7 00 	sts	0x00E7, r24
    1882:	37 cc       	rjmp	.-1938   	; 0x10f2 <main+0x132>
			break;
		/*wrong password for 3 times case*/
		case 6:
			LCD_clearScreen();
    1884:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	60 e0       	ldi	r22, 0x00	; 0
    188c:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_moveCursor>
			LCD_displayString("ERROR");
    1890:	8c ec       	ldi	r24, 0xCC	; 204
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <LCD_displayString>
			/* Initialize the Timer 1 Driver */
			Timer1_init(&Timer_1_Config);
    1898:	ce 01       	movw	r24, r28
    189a:	85 5b       	subi	r24, 0xB5	; 181
    189c:	9f 4f       	sbci	r25, 0xFF	; 255
    189e:	0e 94 92 17 	call	0x2f24	; 0x2f24 <Timer1_init>
			/* Display Error message for one minute
			 * 20 interrupts  (20*3)=60*/
			while(g_timerCount < 20);
    18a2:	80 91 f6 00 	lds	r24, 0x00F6
    18a6:	84 31       	cpi	r24, 0x14	; 20
    18a8:	e0 f3       	brcs	.-8      	; 0x18a2 <main+0x8e2>
			Timer1_deInit();
    18aa:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <Timer1_deInit>
			g_timerCount=0;
    18ae:	10 92 f6 00 	sts	0x00F6, r1
			g_step=3;
    18b2:	83 e0       	ldi	r24, 0x03	; 3
    18b4:	80 93 e7 00 	sts	0x00E7, r24
    18b8:	1c cc       	rjmp	.-1992   	; 0x10f2 <main+0x132>
			break;
		default:
			LCD_clearScreen();
    18ba:	0e 94 22 17 	call	0x2e44	; 0x2e44 <LCD_clearScreen>
			LCD_displayString("System Error");
    18be:	82 ed       	ldi	r24, 0xD2	; 210
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <LCD_displayString>
    18c6:	15 cc       	rjmp	.-2006   	; 0x10f2 <main+0x132>

000018c8 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <UART_init+0x6>
    18ce:	00 d0       	rcall	.+0      	; 0x18d0 <UART_init+0x8>
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
    18d4:	9c 83       	std	Y+4, r25	; 0x04
    18d6:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    18d8:	1a 82       	std	Y+2, r1	; 0x02
    18da:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    18dc:	eb e2       	ldi	r30, 0x2B	; 43
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	82 e0       	ldi	r24, 0x02	; 2
    18e2:	80 83       	st	Z, r24
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    18e4:	ea e2       	ldi	r30, 0x2A	; 42
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	88 e1       	ldi	r24, 0x18	; 24
    18ea:	80 83       	st	Z, r24
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * USBS    = 0 One stop bit
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) ;
    18ec:	e0 e4       	ldi	r30, 0x40	; 64
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 e8       	ldi	r24, 0x80	; 128
    18f2:	80 83       	st	Z, r24
	/*
	 * insert the required bit data value in the :
	 * - UCSZ2 bit of UCSRB Register
	 * - UCSZ1 and UCSZ0 bits of UCSRC Register
	 */
	UCSRB =  (UCSRB & 0xFB) | ((Config_Ptr->bit_data));
    18f4:	aa e2       	ldi	r26, 0x2A	; 42
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	ea e2       	ldi	r30, 0x2A	; 42
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	98 2f       	mov	r25, r24
    1900:	9b 7f       	andi	r25, 0xFB	; 251
    1902:	eb 81       	ldd	r30, Y+3	; 0x03
    1904:	fc 81       	ldd	r31, Y+4	; 0x04
    1906:	80 81       	ld	r24, Z
    1908:	89 2b       	or	r24, r25
    190a:	8c 93       	st	X, r24
	UCSRC  =  (UCSRC & 0xF9) | ((Config_Ptr->bit_data)<<UCSZ0);
    190c:	a0 e4       	ldi	r26, 0x40	; 64
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e0 e4       	ldi	r30, 0x40	; 64
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	28 2f       	mov	r18, r24
    1918:	29 7f       	andi	r18, 0xF9	; 249
    191a:	eb 81       	ldd	r30, Y+3	; 0x03
    191c:	fc 81       	ldd	r31, Y+4	; 0x04
    191e:	80 81       	ld	r24, Z
    1920:	88 2f       	mov	r24, r24
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	82 2b       	or	r24, r18
    192a:	8c 93       	st	X, r24
	if((Config_Ptr->bit_data)== NINE_BITS)
    192c:	eb 81       	ldd	r30, Y+3	; 0x03
    192e:	fc 81       	ldd	r31, Y+4	; 0x04
    1930:	80 81       	ld	r24, Z
    1932:	88 30       	cpi	r24, 0x08	; 8
    1934:	71 f4       	brne	.+28     	; 0x1952 <UART_init+0x8a>
	{
		SET_BIT(UCSRB,RXEN);
    1936:	aa e2       	ldi	r26, 0x2A	; 42
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	ea e2       	ldi	r30, 0x2A	; 42
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	80 61       	ori	r24, 0x10	; 16
    1942:	8c 93       	st	X, r24
		SET_BIT(UCSRB,TXEN);
    1944:	aa e2       	ldi	r26, 0x2A	; 42
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	ea e2       	ldi	r30, 0x2A	; 42
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	88 60       	ori	r24, 0x08	; 8
    1950:	8c 93       	st	X, r24
	}
	/*
	 *  select parity mode by inserting in
	 *  UPM1,UPM0 bits in UCSRC Register
	 */
	UCSRC =  (UCSRC & 0xCF) | ((Config_Ptr->parity)<<UPM0);
    1952:	a0 e4       	ldi	r26, 0x40	; 64
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e0 e4       	ldi	r30, 0x40	; 64
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	28 2f       	mov	r18, r24
    195e:	2f 7c       	andi	r18, 0xCF	; 207
    1960:	eb 81       	ldd	r30, Y+3	; 0x03
    1962:	fc 81       	ldd	r31, Y+4	; 0x04
    1964:	81 81       	ldd	r24, Z+1	; 0x01
    1966:	88 2f       	mov	r24, r24
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	82 95       	swap	r24
    196c:	92 95       	swap	r25
    196e:	90 7f       	andi	r25, 0xF0	; 240
    1970:	98 27       	eor	r25, r24
    1972:	80 7f       	andi	r24, 0xF0	; 240
    1974:	98 27       	eor	r25, r24
    1976:	82 2b       	or	r24, r18
    1978:	8c 93       	st	X, r24

	/*
	 *  select stop bit by inserting in
	 *  USBS bit in UCSRC Register
	 */
	UCSRC =  (UCSRC & 0xF7) | ((Config_Ptr->stop_bit)<<USBS);
    197a:	a0 e4       	ldi	r26, 0x40	; 64
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e0 e4       	ldi	r30, 0x40	; 64
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	28 2f       	mov	r18, r24
    1986:	27 7f       	andi	r18, 0xF7	; 247
    1988:	eb 81       	ldd	r30, Y+3	; 0x03
    198a:	fc 81       	ldd	r31, Y+4	; 0x04
    198c:	82 81       	ldd	r24, Z+2	; 0x02
    198e:	88 2f       	mov	r24, r24
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	82 2b       	or	r24, r18
    19a0:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    19a2:	eb 81       	ldd	r30, Y+3	; 0x03
    19a4:	fc 81       	ldd	r31, Y+4	; 0x04
    19a6:	83 81       	ldd	r24, Z+3	; 0x03
    19a8:	94 81       	ldd	r25, Z+4	; 0x04
    19aa:	a5 81       	ldd	r26, Z+5	; 0x05
    19ac:	b6 81       	ldd	r27, Z+6	; 0x06
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	aa 1f       	adc	r26, r26
    19b4:	bb 1f       	adc	r27, r27
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	aa 1f       	adc	r26, r26
    19bc:	bb 1f       	adc	r27, r27
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	aa 1f       	adc	r26, r26
    19c4:	bb 1f       	adc	r27, r27
    19c6:	9c 01       	movw	r18, r24
    19c8:	ad 01       	movw	r20, r26
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	92 e1       	ldi	r25, 0x12	; 18
    19ce:	aa e7       	ldi	r26, 0x7A	; 122
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	bc 01       	movw	r22, r24
    19d4:	cd 01       	movw	r24, r26
    19d6:	0e 94 2a 18 	call	0x3054	; 0x3054 <__udivmodsi4>
    19da:	da 01       	movw	r26, r20
    19dc:	c9 01       	movw	r24, r18
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	9a 83       	std	Y+2, r25	; 0x02
    19e2:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    19e4:	e0 e4       	ldi	r30, 0x40	; 64
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	9a 81       	ldd	r25, Y+2	; 0x02
    19ec:	89 2f       	mov	r24, r25
    19ee:	99 27       	eor	r25, r25
    19f0:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    19f2:	e9 e2       	ldi	r30, 0x29	; 41
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	80 83       	st	Z, r24
}
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	cf 91       	pop	r28
    1a04:	df 91       	pop	r29
    1a06:	08 95       	ret

00001a08 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1a08:	df 93       	push	r29
    1a0a:	cf 93       	push	r28
    1a0c:	0f 92       	push	r0
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1a14:	eb e2       	ldi	r30, 0x2B	; 43
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	88 2f       	mov	r24, r24
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	80 72       	andi	r24, 0x20	; 32
    1a20:	90 70       	andi	r25, 0x00	; 0
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	b9 f3       	breq	.-18     	; 0x1a14 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1a26:	ec e2       	ldi	r30, 0x2C	; 44
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    1a2e:	0f 90       	pop	r0
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1a3e:	eb e2       	ldi	r30, 0x2B	; 43
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	88 23       	and	r24, r24
    1a46:	dc f7       	brge	.-10     	; 0x1a3e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    1a48:	ec e2       	ldi	r30, 0x2C	; 44
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
}
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	00 d0       	rcall	.+0      	; 0x1a5a <UART_sendString+0x6>
    1a5a:	0f 92       	push	r0
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	9b 83       	std	Y+3, r25	; 0x03
    1a62:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1a64:	19 82       	std	Y+1, r1	; 0x01
    1a66:	0e c0       	rjmp	.+28     	; 0x1a84 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	9b 81       	ldd	r25, Y+3	; 0x03
    1a72:	fc 01       	movw	r30, r24
    1a74:	e2 0f       	add	r30, r18
    1a76:	f3 1f       	adc	r31, r19
    1a78:	80 81       	ld	r24, Z
    1a7a:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <UART_sendByte>
		i++;
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	8f 5f       	subi	r24, 0xFF	; 255
    1a82:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8e:	fc 01       	movw	r30, r24
    1a90:	e2 0f       	add	r30, r18
    1a92:	f3 1f       	adc	r31, r19
    1a94:	80 81       	ld	r24, Z
    1a96:	88 23       	and	r24, r24
    1a98:	39 f7       	brne	.-50     	; 0x1a68 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1aa6:	0f 93       	push	r16
    1aa8:	1f 93       	push	r17
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <UART_receiveString+0xa>
    1ab0:	0f 92       	push	r0
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	9b 83       	std	Y+3, r25	; 0x03
    1ab8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1aba:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac6:	8c 01       	movw	r16, r24
    1ac8:	02 0f       	add	r16, r18
    1aca:	13 1f       	adc	r17, r19
    1acc:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <UART_recieveByte>
    1ad0:	f8 01       	movw	r30, r16
    1ad2:	80 83       	st	Z, r24
    1ad4:	0f c0       	rjmp	.+30     	; 0x1af4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	8f 5f       	subi	r24, 0xFF	; 255
    1ada:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae6:	8c 01       	movw	r16, r24
    1ae8:	02 0f       	add	r16, r18
    1aea:	13 1f       	adc	r17, r19
    1aec:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <UART_recieveByte>
    1af0:	f8 01       	movw	r30, r16
    1af2:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	9b 81       	ldd	r25, Y+3	; 0x03
    1afe:	fc 01       	movw	r30, r24
    1b00:	e2 0f       	add	r30, r18
    1b02:	f3 1f       	adc	r31, r19
    1b04:	80 81       	ld	r24, Z
    1b06:	83 32       	cpi	r24, 0x23	; 35
    1b08:	31 f7       	brne	.-52     	; 0x1ad6 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	9b 81       	ldd	r25, Y+3	; 0x03
    1b14:	fc 01       	movw	r30, r24
    1b16:	e2 0f       	add	r30, r18
    1b18:	f3 1f       	adc	r31, r19
    1b1a:	10 82       	st	Z, r1
}
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	1f 91       	pop	r17
    1b28:	0f 91       	pop	r16
    1b2a:	08 95       	ret

00001b2c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <GPIO_setupPinDirection+0x6>
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <GPIO_setupPinDirection+0x8>
    1b34:	0f 92       	push	r0
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    1b3c:	6a 83       	std	Y+2, r22	; 0x02
    1b3e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	88 30       	cpi	r24, 0x08	; 8
    1b44:	08 f0       	brcs	.+2      	; 0x1b48 <GPIO_setupPinDirection+0x1c>
    1b46:	d5 c0       	rjmp	.+426    	; 0x1cf2 <GPIO_setupPinDirection+0x1c6>
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	84 30       	cpi	r24, 0x04	; 4
    1b4c:	08 f0       	brcs	.+2      	; 0x1b50 <GPIO_setupPinDirection+0x24>
    1b4e:	d1 c0       	rjmp	.+418    	; 0x1cf2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	3d 83       	std	Y+5, r19	; 0x05
    1b58:	2c 83       	std	Y+4, r18	; 0x04
    1b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b5e:	81 30       	cpi	r24, 0x01	; 1
    1b60:	91 05       	cpc	r25, r1
    1b62:	09 f4       	brne	.+2      	; 0x1b66 <GPIO_setupPinDirection+0x3a>
    1b64:	43 c0       	rjmp	.+134    	; 0x1bec <GPIO_setupPinDirection+0xc0>
    1b66:	2c 81       	ldd	r18, Y+4	; 0x04
    1b68:	3d 81       	ldd	r19, Y+5	; 0x05
    1b6a:	22 30       	cpi	r18, 0x02	; 2
    1b6c:	31 05       	cpc	r19, r1
    1b6e:	2c f4       	brge	.+10     	; 0x1b7a <GPIO_setupPinDirection+0x4e>
    1b70:	8c 81       	ldd	r24, Y+4	; 0x04
    1b72:	9d 81       	ldd	r25, Y+5	; 0x05
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	71 f0       	breq	.+28     	; 0x1b94 <GPIO_setupPinDirection+0x68>
    1b78:	bc c0       	rjmp	.+376    	; 0x1cf2 <GPIO_setupPinDirection+0x1c6>
    1b7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b7e:	22 30       	cpi	r18, 0x02	; 2
    1b80:	31 05       	cpc	r19, r1
    1b82:	09 f4       	brne	.+2      	; 0x1b86 <GPIO_setupPinDirection+0x5a>
    1b84:	5f c0       	rjmp	.+190    	; 0x1c44 <GPIO_setupPinDirection+0x118>
    1b86:	8c 81       	ldd	r24, Y+4	; 0x04
    1b88:	9d 81       	ldd	r25, Y+5	; 0x05
    1b8a:	83 30       	cpi	r24, 0x03	; 3
    1b8c:	91 05       	cpc	r25, r1
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <GPIO_setupPinDirection+0x66>
    1b90:	85 c0       	rjmp	.+266    	; 0x1c9c <GPIO_setupPinDirection+0x170>
    1b92:	af c0       	rjmp	.+350    	; 0x1cf2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	81 30       	cpi	r24, 0x01	; 1
    1b98:	a1 f4       	brne	.+40     	; 0x1bc2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1b9a:	aa e3       	ldi	r26, 0x3A	; 58
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	ea e3       	ldi	r30, 0x3A	; 58
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	48 2f       	mov	r20, r24
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	02 2e       	mov	r0, r18
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <GPIO_setupPinDirection+0x8c>
    1bb4:	88 0f       	add	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	0a 94       	dec	r0
    1bba:	e2 f7       	brpl	.-8      	; 0x1bb4 <GPIO_setupPinDirection+0x88>
    1bbc:	84 2b       	or	r24, r20
    1bbe:	8c 93       	st	X, r24
    1bc0:	98 c0       	rjmp	.+304    	; 0x1cf2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1bc2:	aa e3       	ldi	r26, 0x3A	; 58
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	ea e3       	ldi	r30, 0x3A	; 58
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	48 2f       	mov	r20, r24
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	02 2e       	mov	r0, r18
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <GPIO_setupPinDirection+0xb4>
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	0a 94       	dec	r0
    1be2:	e2 f7       	brpl	.-8      	; 0x1bdc <GPIO_setupPinDirection+0xb0>
    1be4:	80 95       	com	r24
    1be6:	84 23       	and	r24, r20
    1be8:	8c 93       	st	X, r24
    1bea:	83 c0       	rjmp	.+262    	; 0x1cf2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	81 30       	cpi	r24, 0x01	; 1
    1bf0:	a1 f4       	brne	.+40     	; 0x1c1a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1bf2:	a7 e3       	ldi	r26, 0x37	; 55
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e7 e3       	ldi	r30, 0x37	; 55
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	48 2f       	mov	r20, r24
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	02 2e       	mov	r0, r18
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <GPIO_setupPinDirection+0xe4>
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	0a 94       	dec	r0
    1c12:	e2 f7       	brpl	.-8      	; 0x1c0c <GPIO_setupPinDirection+0xe0>
    1c14:	84 2b       	or	r24, r20
    1c16:	8c 93       	st	X, r24
    1c18:	6c c0       	rjmp	.+216    	; 0x1cf2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1c1a:	a7 e3       	ldi	r26, 0x37	; 55
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e7 e3       	ldi	r30, 0x37	; 55
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	48 2f       	mov	r20, r24
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	02 2e       	mov	r0, r18
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <GPIO_setupPinDirection+0x10c>
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	0a 94       	dec	r0
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <GPIO_setupPinDirection+0x108>
    1c3c:	80 95       	com	r24
    1c3e:	84 23       	and	r24, r20
    1c40:	8c 93       	st	X, r24
    1c42:	57 c0       	rjmp	.+174    	; 0x1cf2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	81 30       	cpi	r24, 0x01	; 1
    1c48:	a1 f4       	brne	.+40     	; 0x1c72 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1c4a:	a4 e3       	ldi	r26, 0x34	; 52
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e4 e3       	ldi	r30, 0x34	; 52
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	48 2f       	mov	r20, r24
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	28 2f       	mov	r18, r24
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	02 2e       	mov	r0, r18
    1c62:	02 c0       	rjmp	.+4      	; 0x1c68 <GPIO_setupPinDirection+0x13c>
    1c64:	88 0f       	add	r24, r24
    1c66:	99 1f       	adc	r25, r25
    1c68:	0a 94       	dec	r0
    1c6a:	e2 f7       	brpl	.-8      	; 0x1c64 <GPIO_setupPinDirection+0x138>
    1c6c:	84 2b       	or	r24, r20
    1c6e:	8c 93       	st	X, r24
    1c70:	40 c0       	rjmp	.+128    	; 0x1cf2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1c72:	a4 e3       	ldi	r26, 0x34	; 52
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e4 e3       	ldi	r30, 0x34	; 52
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	48 2f       	mov	r20, r24
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	28 2f       	mov	r18, r24
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	02 2e       	mov	r0, r18
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <GPIO_setupPinDirection+0x164>
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	0a 94       	dec	r0
    1c92:	e2 f7       	brpl	.-8      	; 0x1c8c <GPIO_setupPinDirection+0x160>
    1c94:	80 95       	com	r24
    1c96:	84 23       	and	r24, r20
    1c98:	8c 93       	st	X, r24
    1c9a:	2b c0       	rjmp	.+86     	; 0x1cf2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	81 30       	cpi	r24, 0x01	; 1
    1ca0:	a1 f4       	brne	.+40     	; 0x1cca <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1ca2:	a1 e3       	ldi	r26, 0x31	; 49
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	e1 e3       	ldi	r30, 0x31	; 49
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	48 2f       	mov	r20, r24
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	02 2e       	mov	r0, r18
    1cba:	02 c0       	rjmp	.+4      	; 0x1cc0 <GPIO_setupPinDirection+0x194>
    1cbc:	88 0f       	add	r24, r24
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	0a 94       	dec	r0
    1cc2:	e2 f7       	brpl	.-8      	; 0x1cbc <GPIO_setupPinDirection+0x190>
    1cc4:	84 2b       	or	r24, r20
    1cc6:	8c 93       	st	X, r24
    1cc8:	14 c0       	rjmp	.+40     	; 0x1cf2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1cca:	a1 e3       	ldi	r26, 0x31	; 49
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e1 e3       	ldi	r30, 0x31	; 49
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	48 2f       	mov	r20, r24
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	28 2f       	mov	r18, r24
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	02 2e       	mov	r0, r18
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <GPIO_setupPinDirection+0x1bc>
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	0a 94       	dec	r0
    1cea:	e2 f7       	brpl	.-8      	; 0x1ce4 <GPIO_setupPinDirection+0x1b8>
    1cec:	80 95       	com	r24
    1cee:	84 23       	and	r24, r20
    1cf0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <GPIO_writePin+0x6>
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <GPIO_writePin+0x8>
    1d0a:	0f 92       	push	r0
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	6a 83       	std	Y+2, r22	; 0x02
    1d14:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d16:	8a 81       	ldd	r24, Y+2	; 0x02
    1d18:	88 30       	cpi	r24, 0x08	; 8
    1d1a:	08 f0       	brcs	.+2      	; 0x1d1e <GPIO_writePin+0x1c>
    1d1c:	d5 c0       	rjmp	.+426    	; 0x1ec8 <GPIO_writePin+0x1c6>
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	84 30       	cpi	r24, 0x04	; 4
    1d22:	08 f0       	brcs	.+2      	; 0x1d26 <GPIO_writePin+0x24>
    1d24:	d1 c0       	rjmp	.+418    	; 0x1ec8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	3d 83       	std	Y+5, r19	; 0x05
    1d2e:	2c 83       	std	Y+4, r18	; 0x04
    1d30:	8c 81       	ldd	r24, Y+4	; 0x04
    1d32:	9d 81       	ldd	r25, Y+5	; 0x05
    1d34:	81 30       	cpi	r24, 0x01	; 1
    1d36:	91 05       	cpc	r25, r1
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <GPIO_writePin+0x3a>
    1d3a:	43 c0       	rjmp	.+134    	; 0x1dc2 <GPIO_writePin+0xc0>
    1d3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d3e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d40:	22 30       	cpi	r18, 0x02	; 2
    1d42:	31 05       	cpc	r19, r1
    1d44:	2c f4       	brge	.+10     	; 0x1d50 <GPIO_writePin+0x4e>
    1d46:	8c 81       	ldd	r24, Y+4	; 0x04
    1d48:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	71 f0       	breq	.+28     	; 0x1d6a <GPIO_writePin+0x68>
    1d4e:	bc c0       	rjmp	.+376    	; 0x1ec8 <GPIO_writePin+0x1c6>
    1d50:	2c 81       	ldd	r18, Y+4	; 0x04
    1d52:	3d 81       	ldd	r19, Y+5	; 0x05
    1d54:	22 30       	cpi	r18, 0x02	; 2
    1d56:	31 05       	cpc	r19, r1
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <GPIO_writePin+0x5a>
    1d5a:	5f c0       	rjmp	.+190    	; 0x1e1a <GPIO_writePin+0x118>
    1d5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d60:	83 30       	cpi	r24, 0x03	; 3
    1d62:	91 05       	cpc	r25, r1
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <GPIO_writePin+0x66>
    1d66:	85 c0       	rjmp	.+266    	; 0x1e72 <GPIO_writePin+0x170>
    1d68:	af c0       	rjmp	.+350    	; 0x1ec8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	81 30       	cpi	r24, 0x01	; 1
    1d6e:	a1 f4       	brne	.+40     	; 0x1d98 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1d70:	ab e3       	ldi	r26, 0x3B	; 59
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	eb e3       	ldi	r30, 0x3B	; 59
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	48 2f       	mov	r20, r24
    1d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	02 2e       	mov	r0, r18
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <GPIO_writePin+0x8c>
    1d8a:	88 0f       	add	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	0a 94       	dec	r0
    1d90:	e2 f7       	brpl	.-8      	; 0x1d8a <GPIO_writePin+0x88>
    1d92:	84 2b       	or	r24, r20
    1d94:	8c 93       	st	X, r24
    1d96:	98 c0       	rjmp	.+304    	; 0x1ec8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1d98:	ab e3       	ldi	r26, 0x3B	; 59
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	eb e3       	ldi	r30, 0x3B	; 59
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	48 2f       	mov	r20, r24
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	02 2e       	mov	r0, r18
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <GPIO_writePin+0xb4>
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	0a 94       	dec	r0
    1db8:	e2 f7       	brpl	.-8      	; 0x1db2 <GPIO_writePin+0xb0>
    1dba:	80 95       	com	r24
    1dbc:	84 23       	and	r24, r20
    1dbe:	8c 93       	st	X, r24
    1dc0:	83 c0       	rjmp	.+262    	; 0x1ec8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	81 30       	cpi	r24, 0x01	; 1
    1dc6:	a1 f4       	brne	.+40     	; 0x1df0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1dc8:	a8 e3       	ldi	r26, 0x38	; 56
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	e8 e3       	ldi	r30, 0x38	; 56
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	48 2f       	mov	r20, r24
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	02 2e       	mov	r0, r18
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <GPIO_writePin+0xe4>
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	0a 94       	dec	r0
    1de8:	e2 f7       	brpl	.-8      	; 0x1de2 <GPIO_writePin+0xe0>
    1dea:	84 2b       	or	r24, r20
    1dec:	8c 93       	st	X, r24
    1dee:	6c c0       	rjmp	.+216    	; 0x1ec8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1df0:	a8 e3       	ldi	r26, 0x38	; 56
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e8 e3       	ldi	r30, 0x38	; 56
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	48 2f       	mov	r20, r24
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	02 2e       	mov	r0, r18
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <GPIO_writePin+0x10c>
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	0a 94       	dec	r0
    1e10:	e2 f7       	brpl	.-8      	; 0x1e0a <GPIO_writePin+0x108>
    1e12:	80 95       	com	r24
    1e14:	84 23       	and	r24, r20
    1e16:	8c 93       	st	X, r24
    1e18:	57 c0       	rjmp	.+174    	; 0x1ec8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	81 30       	cpi	r24, 0x01	; 1
    1e1e:	a1 f4       	brne	.+40     	; 0x1e48 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1e20:	a5 e3       	ldi	r26, 0x35	; 53
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e5 e3       	ldi	r30, 0x35	; 53
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	48 2f       	mov	r20, r24
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	28 2f       	mov	r18, r24
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	02 2e       	mov	r0, r18
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <GPIO_writePin+0x13c>
    1e3a:	88 0f       	add	r24, r24
    1e3c:	99 1f       	adc	r25, r25
    1e3e:	0a 94       	dec	r0
    1e40:	e2 f7       	brpl	.-8      	; 0x1e3a <GPIO_writePin+0x138>
    1e42:	84 2b       	or	r24, r20
    1e44:	8c 93       	st	X, r24
    1e46:	40 c0       	rjmp	.+128    	; 0x1ec8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1e48:	a5 e3       	ldi	r26, 0x35	; 53
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	e5 e3       	ldi	r30, 0x35	; 53
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	48 2f       	mov	r20, r24
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	28 2f       	mov	r18, r24
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	02 2e       	mov	r0, r18
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <GPIO_writePin+0x164>
    1e62:	88 0f       	add	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	0a 94       	dec	r0
    1e68:	e2 f7       	brpl	.-8      	; 0x1e62 <GPIO_writePin+0x160>
    1e6a:	80 95       	com	r24
    1e6c:	84 23       	and	r24, r20
    1e6e:	8c 93       	st	X, r24
    1e70:	2b c0       	rjmp	.+86     	; 0x1ec8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	81 30       	cpi	r24, 0x01	; 1
    1e76:	a1 f4       	brne	.+40     	; 0x1ea0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1e78:	a2 e3       	ldi	r26, 0x32	; 50
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e2 e3       	ldi	r30, 0x32	; 50
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	48 2f       	mov	r20, r24
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	28 2f       	mov	r18, r24
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	02 2e       	mov	r0, r18
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <GPIO_writePin+0x194>
    1e92:	88 0f       	add	r24, r24
    1e94:	99 1f       	adc	r25, r25
    1e96:	0a 94       	dec	r0
    1e98:	e2 f7       	brpl	.-8      	; 0x1e92 <GPIO_writePin+0x190>
    1e9a:	84 2b       	or	r24, r20
    1e9c:	8c 93       	st	X, r24
    1e9e:	14 c0       	rjmp	.+40     	; 0x1ec8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1ea0:	a2 e3       	ldi	r26, 0x32	; 50
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e2 e3       	ldi	r30, 0x32	; 50
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	48 2f       	mov	r20, r24
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	02 2e       	mov	r0, r18
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <GPIO_writePin+0x1bc>
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	0a 94       	dec	r0
    1ec0:	e2 f7       	brpl	.-8      	; 0x1eba <GPIO_writePin+0x1b8>
    1ec2:	80 95       	com	r24
    1ec4:	84 23       	and	r24, r20
    1ec6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	cf 91       	pop	r28
    1ed4:	df 91       	pop	r29
    1ed6:	08 95       	ret

00001ed8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	00 d0       	rcall	.+0      	; 0x1ede <GPIO_readPin+0x6>
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <GPIO_readPin+0x8>
    1ee0:	0f 92       	push	r0
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	8a 83       	std	Y+2, r24	; 0x02
    1ee8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1eea:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	88 30       	cpi	r24, 0x08	; 8
    1ef0:	08 f0       	brcs	.+2      	; 0x1ef4 <GPIO_readPin+0x1c>
    1ef2:	84 c0       	rjmp	.+264    	; 0x1ffc <GPIO_readPin+0x124>
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	84 30       	cpi	r24, 0x04	; 4
    1ef8:	08 f0       	brcs	.+2      	; 0x1efc <GPIO_readPin+0x24>
    1efa:	80 c0       	rjmp	.+256    	; 0x1ffc <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	28 2f       	mov	r18, r24
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	3d 83       	std	Y+5, r19	; 0x05
    1f04:	2c 83       	std	Y+4, r18	; 0x04
    1f06:	4c 81       	ldd	r20, Y+4	; 0x04
    1f08:	5d 81       	ldd	r21, Y+5	; 0x05
    1f0a:	41 30       	cpi	r20, 0x01	; 1
    1f0c:	51 05       	cpc	r21, r1
    1f0e:	79 f1       	breq	.+94     	; 0x1f6e <GPIO_readPin+0x96>
    1f10:	8c 81       	ldd	r24, Y+4	; 0x04
    1f12:	9d 81       	ldd	r25, Y+5	; 0x05
    1f14:	82 30       	cpi	r24, 0x02	; 2
    1f16:	91 05       	cpc	r25, r1
    1f18:	34 f4       	brge	.+12     	; 0x1f26 <GPIO_readPin+0x4e>
    1f1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f1e:	21 15       	cp	r18, r1
    1f20:	31 05       	cpc	r19, r1
    1f22:	69 f0       	breq	.+26     	; 0x1f3e <GPIO_readPin+0x66>
    1f24:	6b c0       	rjmp	.+214    	; 0x1ffc <GPIO_readPin+0x124>
    1f26:	4c 81       	ldd	r20, Y+4	; 0x04
    1f28:	5d 81       	ldd	r21, Y+5	; 0x05
    1f2a:	42 30       	cpi	r20, 0x02	; 2
    1f2c:	51 05       	cpc	r21, r1
    1f2e:	b9 f1       	breq	.+110    	; 0x1f9e <GPIO_readPin+0xc6>
    1f30:	8c 81       	ldd	r24, Y+4	; 0x04
    1f32:	9d 81       	ldd	r25, Y+5	; 0x05
    1f34:	83 30       	cpi	r24, 0x03	; 3
    1f36:	91 05       	cpc	r25, r1
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <GPIO_readPin+0x64>
    1f3a:	49 c0       	rjmp	.+146    	; 0x1fce <GPIO_readPin+0xf6>
    1f3c:	5f c0       	rjmp	.+190    	; 0x1ffc <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1f3e:	e9 e3       	ldi	r30, 0x39	; 57
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	88 2f       	mov	r24, r24
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	a9 01       	movw	r20, r18
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <GPIO_readPin+0x7e>
    1f52:	55 95       	asr	r21
    1f54:	47 95       	ror	r20
    1f56:	8a 95       	dec	r24
    1f58:	e2 f7       	brpl	.-8      	; 0x1f52 <GPIO_readPin+0x7a>
    1f5a:	ca 01       	movw	r24, r20
    1f5c:	81 70       	andi	r24, 0x01	; 1
    1f5e:	90 70       	andi	r25, 0x00	; 0
    1f60:	88 23       	and	r24, r24
    1f62:	19 f0       	breq	.+6      	; 0x1f6a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	89 83       	std	Y+1, r24	; 0x01
    1f68:	49 c0       	rjmp	.+146    	; 0x1ffc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f6a:	19 82       	std	Y+1, r1	; 0x01
    1f6c:	47 c0       	rjmp	.+142    	; 0x1ffc <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1f6e:	e6 e3       	ldi	r30, 0x36	; 54
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	88 2f       	mov	r24, r24
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	a9 01       	movw	r20, r18
    1f80:	02 c0       	rjmp	.+4      	; 0x1f86 <GPIO_readPin+0xae>
    1f82:	55 95       	asr	r21
    1f84:	47 95       	ror	r20
    1f86:	8a 95       	dec	r24
    1f88:	e2 f7       	brpl	.-8      	; 0x1f82 <GPIO_readPin+0xaa>
    1f8a:	ca 01       	movw	r24, r20
    1f8c:	81 70       	andi	r24, 0x01	; 1
    1f8e:	90 70       	andi	r25, 0x00	; 0
    1f90:	88 23       	and	r24, r24
    1f92:	19 f0       	breq	.+6      	; 0x1f9a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	89 83       	std	Y+1, r24	; 0x01
    1f98:	31 c0       	rjmp	.+98     	; 0x1ffc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f9a:	19 82       	std	Y+1, r1	; 0x01
    1f9c:	2f c0       	rjmp	.+94     	; 0x1ffc <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1f9e:	e3 e3       	ldi	r30, 0x33	; 51
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1faa:	88 2f       	mov	r24, r24
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	a9 01       	movw	r20, r18
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <GPIO_readPin+0xde>
    1fb2:	55 95       	asr	r21
    1fb4:	47 95       	ror	r20
    1fb6:	8a 95       	dec	r24
    1fb8:	e2 f7       	brpl	.-8      	; 0x1fb2 <GPIO_readPin+0xda>
    1fba:	ca 01       	movw	r24, r20
    1fbc:	81 70       	andi	r24, 0x01	; 1
    1fbe:	90 70       	andi	r25, 0x00	; 0
    1fc0:	88 23       	and	r24, r24
    1fc2:	19 f0       	breq	.+6      	; 0x1fca <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	89 83       	std	Y+1, r24	; 0x01
    1fc8:	19 c0       	rjmp	.+50     	; 0x1ffc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1fca:	19 82       	std	Y+1, r1	; 0x01
    1fcc:	17 c0       	rjmp	.+46     	; 0x1ffc <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1fce:	e0 e3       	ldi	r30, 0x30	; 48
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	28 2f       	mov	r18, r24
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	88 2f       	mov	r24, r24
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	a9 01       	movw	r20, r18
    1fe0:	02 c0       	rjmp	.+4      	; 0x1fe6 <GPIO_readPin+0x10e>
    1fe2:	55 95       	asr	r21
    1fe4:	47 95       	ror	r20
    1fe6:	8a 95       	dec	r24
    1fe8:	e2 f7       	brpl	.-8      	; 0x1fe2 <GPIO_readPin+0x10a>
    1fea:	ca 01       	movw	r24, r20
    1fec:	81 70       	andi	r24, 0x01	; 1
    1fee:	90 70       	andi	r25, 0x00	; 0
    1ff0:	88 23       	and	r24, r24
    1ff2:	19 f0       	breq	.+6      	; 0x1ffa <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	89 83       	std	Y+1, r24	; 0x01
    1ff8:	01 c0       	rjmp	.+2      	; 0x1ffc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ffa:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	00 d0       	rcall	.+0      	; 0x2014 <GPIO_setupPortDirection+0x6>
    2014:	00 d0       	rcall	.+0      	; 0x2016 <GPIO_setupPortDirection+0x8>
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	89 83       	std	Y+1, r24	; 0x01
    201c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	84 30       	cpi	r24, 0x04	; 4
    2022:	90 f5       	brcc	.+100    	; 0x2088 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	28 2f       	mov	r18, r24
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	3c 83       	std	Y+4, r19	; 0x04
    202c:	2b 83       	std	Y+3, r18	; 0x03
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	9c 81       	ldd	r25, Y+4	; 0x04
    2032:	81 30       	cpi	r24, 0x01	; 1
    2034:	91 05       	cpc	r25, r1
    2036:	d1 f0       	breq	.+52     	; 0x206c <GPIO_setupPortDirection+0x5e>
    2038:	2b 81       	ldd	r18, Y+3	; 0x03
    203a:	3c 81       	ldd	r19, Y+4	; 0x04
    203c:	22 30       	cpi	r18, 0x02	; 2
    203e:	31 05       	cpc	r19, r1
    2040:	2c f4       	brge	.+10     	; 0x204c <GPIO_setupPortDirection+0x3e>
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	9c 81       	ldd	r25, Y+4	; 0x04
    2046:	00 97       	sbiw	r24, 0x00	; 0
    2048:	61 f0       	breq	.+24     	; 0x2062 <GPIO_setupPortDirection+0x54>
    204a:	1e c0       	rjmp	.+60     	; 0x2088 <GPIO_setupPortDirection+0x7a>
    204c:	2b 81       	ldd	r18, Y+3	; 0x03
    204e:	3c 81       	ldd	r19, Y+4	; 0x04
    2050:	22 30       	cpi	r18, 0x02	; 2
    2052:	31 05       	cpc	r19, r1
    2054:	81 f0       	breq	.+32     	; 0x2076 <GPIO_setupPortDirection+0x68>
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	9c 81       	ldd	r25, Y+4	; 0x04
    205a:	83 30       	cpi	r24, 0x03	; 3
    205c:	91 05       	cpc	r25, r1
    205e:	81 f0       	breq	.+32     	; 0x2080 <GPIO_setupPortDirection+0x72>
    2060:	13 c0       	rjmp	.+38     	; 0x2088 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2062:	ea e3       	ldi	r30, 0x3A	; 58
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	80 83       	st	Z, r24
    206a:	0e c0       	rjmp	.+28     	; 0x2088 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    206c:	e7 e3       	ldi	r30, 0x37	; 55
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	80 83       	st	Z, r24
    2074:	09 c0       	rjmp	.+18     	; 0x2088 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2076:	e4 e3       	ldi	r30, 0x34	; 52
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	8a 81       	ldd	r24, Y+2	; 0x02
    207c:	80 83       	st	Z, r24
    207e:	04 c0       	rjmp	.+8      	; 0x2088 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2080:	e1 e3       	ldi	r30, 0x31	; 49
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	8a 81       	ldd	r24, Y+2	; 0x02
    2086:	80 83       	st	Z, r24
			break;
		}
	}
}
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	cf 91       	pop	r28
    2092:	df 91       	pop	r29
    2094:	08 95       	ret

00002096 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2096:	df 93       	push	r29
    2098:	cf 93       	push	r28
    209a:	00 d0       	rcall	.+0      	; 0x209c <GPIO_writePort+0x6>
    209c:	00 d0       	rcall	.+0      	; 0x209e <GPIO_writePort+0x8>
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	84 30       	cpi	r24, 0x04	; 4
    20aa:	90 f5       	brcc	.+100    	; 0x2110 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	3c 83       	std	Y+4, r19	; 0x04
    20b4:	2b 83       	std	Y+3, r18	; 0x03
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ba:	81 30       	cpi	r24, 0x01	; 1
    20bc:	91 05       	cpc	r25, r1
    20be:	d1 f0       	breq	.+52     	; 0x20f4 <GPIO_writePort+0x5e>
    20c0:	2b 81       	ldd	r18, Y+3	; 0x03
    20c2:	3c 81       	ldd	r19, Y+4	; 0x04
    20c4:	22 30       	cpi	r18, 0x02	; 2
    20c6:	31 05       	cpc	r19, r1
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <GPIO_writePort+0x3e>
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	61 f0       	breq	.+24     	; 0x20ea <GPIO_writePort+0x54>
    20d2:	1e c0       	rjmp	.+60     	; 0x2110 <GPIO_writePort+0x7a>
    20d4:	2b 81       	ldd	r18, Y+3	; 0x03
    20d6:	3c 81       	ldd	r19, Y+4	; 0x04
    20d8:	22 30       	cpi	r18, 0x02	; 2
    20da:	31 05       	cpc	r19, r1
    20dc:	81 f0       	breq	.+32     	; 0x20fe <GPIO_writePort+0x68>
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	83 30       	cpi	r24, 0x03	; 3
    20e4:	91 05       	cpc	r25, r1
    20e6:	81 f0       	breq	.+32     	; 0x2108 <GPIO_writePort+0x72>
    20e8:	13 c0       	rjmp	.+38     	; 0x2110 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    20ea:	eb e3       	ldi	r30, 0x3B	; 59
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	80 83       	st	Z, r24
    20f2:	0e c0       	rjmp	.+28     	; 0x2110 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    20f4:	e8 e3       	ldi	r30, 0x38	; 56
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	80 83       	st	Z, r24
    20fc:	09 c0       	rjmp	.+18     	; 0x2110 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    20fe:	e5 e3       	ldi	r30, 0x35	; 53
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	8a 81       	ldd	r24, Y+2	; 0x02
    2104:	80 83       	st	Z, r24
    2106:	04 c0       	rjmp	.+8      	; 0x2110 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2108:	e2 e3       	ldi	r30, 0x32	; 50
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	8a 81       	ldd	r24, Y+2	; 0x02
    210e:	80 83       	st	Z, r24
			break;
		}
	}
}
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	08 95       	ret

0000211e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	00 d0       	rcall	.+0      	; 0x2124 <GPIO_readPort+0x6>
    2124:	00 d0       	rcall	.+0      	; 0x2126 <GPIO_readPort+0x8>
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    212c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	84 30       	cpi	r24, 0x04	; 4
    2132:	90 f5       	brcc	.+100    	; 0x2198 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2134:	8a 81       	ldd	r24, Y+2	; 0x02
    2136:	28 2f       	mov	r18, r24
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	3c 83       	std	Y+4, r19	; 0x04
    213c:	2b 83       	std	Y+3, r18	; 0x03
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	9c 81       	ldd	r25, Y+4	; 0x04
    2142:	81 30       	cpi	r24, 0x01	; 1
    2144:	91 05       	cpc	r25, r1
    2146:	d1 f0       	breq	.+52     	; 0x217c <GPIO_readPort+0x5e>
    2148:	2b 81       	ldd	r18, Y+3	; 0x03
    214a:	3c 81       	ldd	r19, Y+4	; 0x04
    214c:	22 30       	cpi	r18, 0x02	; 2
    214e:	31 05       	cpc	r19, r1
    2150:	2c f4       	brge	.+10     	; 0x215c <GPIO_readPort+0x3e>
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	9c 81       	ldd	r25, Y+4	; 0x04
    2156:	00 97       	sbiw	r24, 0x00	; 0
    2158:	61 f0       	breq	.+24     	; 0x2172 <GPIO_readPort+0x54>
    215a:	1e c0       	rjmp	.+60     	; 0x2198 <GPIO_readPort+0x7a>
    215c:	2b 81       	ldd	r18, Y+3	; 0x03
    215e:	3c 81       	ldd	r19, Y+4	; 0x04
    2160:	22 30       	cpi	r18, 0x02	; 2
    2162:	31 05       	cpc	r19, r1
    2164:	81 f0       	breq	.+32     	; 0x2186 <GPIO_readPort+0x68>
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	9c 81       	ldd	r25, Y+4	; 0x04
    216a:	83 30       	cpi	r24, 0x03	; 3
    216c:	91 05       	cpc	r25, r1
    216e:	81 f0       	breq	.+32     	; 0x2190 <GPIO_readPort+0x72>
    2170:	13 c0       	rjmp	.+38     	; 0x2198 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2172:	e9 e3       	ldi	r30, 0x39	; 57
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	89 83       	std	Y+1, r24	; 0x01
    217a:	0e c0       	rjmp	.+28     	; 0x2198 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    217c:	e6 e3       	ldi	r30, 0x36	; 54
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	80 81       	ld	r24, Z
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	09 c0       	rjmp	.+18     	; 0x2198 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2186:	e3 e3       	ldi	r30, 0x33	; 51
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	89 83       	std	Y+1, r24	; 0x01
    218e:	04 c0       	rjmp	.+8      	; 0x2198 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2190:	e0 e3       	ldi	r30, 0x30	; 48
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2198:	89 81       	ldd	r24, Y+1	; 0x01
}
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <KEYPAD_getPressedKey+0x6>
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_OUTPUT);
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	60 e0       	ldi	r22, 0x00	; 0
    21b6:	41 e0       	ldi	r20, 0x01	; 1
    21b8:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_OUTPUT);
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	61 e0       	ldi	r22, 0x01	; 1
    21c0:	41 e0       	ldi	r20, 0x01	; 1
    21c2:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_OUTPUT);
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	62 e0       	ldi	r22, 0x02	; 2
    21ca:	41 e0       	ldi	r20, 0x01	; 1
    21cc:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_OUTPUT);
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	63 e0       	ldi	r22, 0x03	; 3
    21d4:	41 e0       	ldi	r20, 0x01	; 1
    21d6:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <GPIO_setupPinDirection>

	/* Set/Clear the row output pin */
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, KEYPAD_BUTTON_RELEASED);
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	60 e0       	ldi	r22, 0x00	; 0
    21de:	41 e0       	ldi	r20, 0x01	; 1
    21e0:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, KEYPAD_BUTTON_RELEASED);
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	61 e0       	ldi	r22, 0x01	; 1
    21e8:	41 e0       	ldi	r20, 0x01	; 1
    21ea:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, KEYPAD_BUTTON_RELEASED);
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	62 e0       	ldi	r22, 0x02	; 2
    21f2:	41 e0       	ldi	r20, 0x01	; 1
    21f4:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, KEYPAD_BUTTON_RELEASED);
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	63 e0       	ldi	r22, 0x03	; 3
    21fc:	41 e0       	ldi	r20, 0x01	; 1
    21fe:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <GPIO_writePin>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	64 e0       	ldi	r22, 0x04	; 4
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	65 e0       	ldi	r22, 0x05	; 5
    2210:	40 e0       	ldi	r20, 0x00	; 0
    2212:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	66 e0       	ldi	r22, 0x06	; 6
    221a:	40 e0       	ldi	r20, 0x00	; 0
    221c:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	67 e0       	ldi	r22, 0x07	; 7
    2224:	40 e0       	ldi	r20, 0x00	; 0
    2226:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    222a:	19 82       	std	Y+1, r1	; 0x01
    222c:	35 c0       	rjmp	.+106    	; 0x2298 <KEYPAD_getPressedKey+0xf0>
			 * except this row will be output pin
			 */
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	69 81       	ldd	r22, Y+1	; 0x01
    2232:	40 e0       	ldi	r20, 0x00	; 0
    2234:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2238:	1a 82       	std	Y+2, r1	; 0x02
    223a:	23 c0       	rjmp	.+70     	; 0x2282 <KEYPAD_getPressedKey+0xda>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	98 2f       	mov	r25, r24
    2240:	9c 5f       	subi	r25, 0xFC	; 252
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	69 2f       	mov	r22, r25
    2246:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <GPIO_readPin>
    224a:	88 23       	and	r24, r24
    224c:	b9 f4       	brne	.+46     	; 0x227c <KEYPAD_getPressedKey+0xd4>
				{
//					GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
					GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	69 81       	ldd	r22, Y+1	; 0x01
    2252:	41 e0       	ldi	r20, 0x01	; 1
    2254:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <GPIO_writePin>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	88 2f       	mov	r24, r24
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	88 0f       	add	r24, r24
    2260:	99 1f       	adc	r25, r25
    2262:	88 0f       	add	r24, r24
    2264:	99 1f       	adc	r25, r25
    2266:	98 2f       	mov	r25, r24
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	89 0f       	add	r24, r25
    226c:	8f 5f       	subi	r24, 0xFF	; 255
    226e:	0e 94 50 11 	call	0x22a0	; 0x22a0 <KEYPAD_4x4_adjustKeyNumber>
			}
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
		}
	}
}
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	cf 91       	pop	r28
    2278:	df 91       	pop	r29
    227a:	08 95       	ret
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	8f 5f       	subi	r24, 0xFF	; 255
    2280:	8a 83       	std	Y+2, r24	; 0x02
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	84 30       	cpi	r24, 0x04	; 4
    2286:	d0 f2       	brcs	.-76     	; 0x223c <KEYPAD_getPressedKey+0x94>
						#endif
					#endif
				}
			}
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	69 81       	ldd	r22, Y+1	; 0x01
    228c:	41 e0       	ldi	r20, 0x01	; 1
    228e:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <GPIO_writePin>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	8f 5f       	subi	r24, 0xFF	; 255
    2296:	89 83       	std	Y+1, r24	; 0x01
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	84 30       	cpi	r24, 0x04	; 4
    229c:	40 f2       	brcs	.-112    	; 0x222e <KEYPAD_getPressedKey+0x86>
    229e:	c5 cf       	rjmp	.-118    	; 0x222a <KEYPAD_getPressedKey+0x82>

000022a0 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    22a0:	df 93       	push	r29
    22a2:	cf 93       	push	r28
    22a4:	00 d0       	rcall	.+0      	; 0x22a6 <KEYPAD_4x4_adjustKeyNumber+0x6>
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <KEYPAD_4x4_adjustKeyNumber+0x8>
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    22ae:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	28 2f       	mov	r18, r24
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	3c 83       	std	Y+4, r19	; 0x04
    22b8:	2b 83       	std	Y+3, r18	; 0x03
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	9c 81       	ldd	r25, Y+4	; 0x04
    22be:	88 30       	cpi	r24, 0x08	; 8
    22c0:	91 05       	cpc	r25, r1
    22c2:	09 f4       	brne	.+2      	; 0x22c6 <KEYPAD_4x4_adjustKeyNumber+0x26>
    22c4:	70 c0       	rjmp	.+224    	; 0x23a6 <KEYPAD_4x4_adjustKeyNumber+0x106>
    22c6:	2b 81       	ldd	r18, Y+3	; 0x03
    22c8:	3c 81       	ldd	r19, Y+4	; 0x04
    22ca:	29 30       	cpi	r18, 0x09	; 9
    22cc:	31 05       	cpc	r19, r1
    22ce:	5c f5       	brge	.+86     	; 0x2326 <KEYPAD_4x4_adjustKeyNumber+0x86>
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	9c 81       	ldd	r25, Y+4	; 0x04
    22d4:	84 30       	cpi	r24, 0x04	; 4
    22d6:	91 05       	cpc	r25, r1
    22d8:	09 f4       	brne	.+2      	; 0x22dc <KEYPAD_4x4_adjustKeyNumber+0x3c>
    22da:	59 c0       	rjmp	.+178    	; 0x238e <KEYPAD_4x4_adjustKeyNumber+0xee>
    22dc:	2b 81       	ldd	r18, Y+3	; 0x03
    22de:	3c 81       	ldd	r19, Y+4	; 0x04
    22e0:	25 30       	cpi	r18, 0x05	; 5
    22e2:	31 05       	cpc	r19, r1
    22e4:	9c f4       	brge	.+38     	; 0x230c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ea:	82 30       	cpi	r24, 0x02	; 2
    22ec:	91 05       	cpc	r25, r1
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <KEYPAD_4x4_adjustKeyNumber+0x52>
    22f0:	48 c0       	rjmp	.+144    	; 0x2382 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    22f2:	2b 81       	ldd	r18, Y+3	; 0x03
    22f4:	3c 81       	ldd	r19, Y+4	; 0x04
    22f6:	23 30       	cpi	r18, 0x03	; 3
    22f8:	31 05       	cpc	r19, r1
    22fa:	0c f0       	brlt	.+2      	; 0x22fe <KEYPAD_4x4_adjustKeyNumber+0x5e>
    22fc:	45 c0       	rjmp	.+138    	; 0x2388 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	9c 81       	ldd	r25, Y+4	; 0x04
    2302:	81 30       	cpi	r24, 0x01	; 1
    2304:	91 05       	cpc	r25, r1
    2306:	09 f4       	brne	.+2      	; 0x230a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2308:	39 c0       	rjmp	.+114    	; 0x237c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    230a:	67 c0       	rjmp	.+206    	; 0x23da <KEYPAD_4x4_adjustKeyNumber+0x13a>
    230c:	2b 81       	ldd	r18, Y+3	; 0x03
    230e:	3c 81       	ldd	r19, Y+4	; 0x04
    2310:	26 30       	cpi	r18, 0x06	; 6
    2312:	31 05       	cpc	r19, r1
    2314:	09 f4       	brne	.+2      	; 0x2318 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2316:	41 c0       	rjmp	.+130    	; 0x239a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	9c 81       	ldd	r25, Y+4	; 0x04
    231c:	87 30       	cpi	r24, 0x07	; 7
    231e:	91 05       	cpc	r25, r1
    2320:	0c f0       	brlt	.+2      	; 0x2324 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2322:	3e c0       	rjmp	.+124    	; 0x23a0 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2324:	37 c0       	rjmp	.+110    	; 0x2394 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2326:	2b 81       	ldd	r18, Y+3	; 0x03
    2328:	3c 81       	ldd	r19, Y+4	; 0x04
    232a:	2c 30       	cpi	r18, 0x0C	; 12
    232c:	31 05       	cpc	r19, r1
    232e:	09 f4       	brne	.+2      	; 0x2332 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2330:	46 c0       	rjmp	.+140    	; 0x23be <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2332:	8b 81       	ldd	r24, Y+3	; 0x03
    2334:	9c 81       	ldd	r25, Y+4	; 0x04
    2336:	8d 30       	cpi	r24, 0x0D	; 13
    2338:	91 05       	cpc	r25, r1
    233a:	5c f4       	brge	.+22     	; 0x2352 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    233c:	2b 81       	ldd	r18, Y+3	; 0x03
    233e:	3c 81       	ldd	r19, Y+4	; 0x04
    2340:	2a 30       	cpi	r18, 0x0A	; 10
    2342:	31 05       	cpc	r19, r1
    2344:	b1 f1       	breq	.+108    	; 0x23b2 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	9c 81       	ldd	r25, Y+4	; 0x04
    234a:	8b 30       	cpi	r24, 0x0B	; 11
    234c:	91 05       	cpc	r25, r1
    234e:	a4 f5       	brge	.+104    	; 0x23b8 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2350:	2d c0       	rjmp	.+90     	; 0x23ac <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2352:	2b 81       	ldd	r18, Y+3	; 0x03
    2354:	3c 81       	ldd	r19, Y+4	; 0x04
    2356:	2e 30       	cpi	r18, 0x0E	; 14
    2358:	31 05       	cpc	r19, r1
    235a:	b9 f1       	breq	.+110    	; 0x23ca <KEYPAD_4x4_adjustKeyNumber+0x12a>
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	9c 81       	ldd	r25, Y+4	; 0x04
    2360:	8e 30       	cpi	r24, 0x0E	; 14
    2362:	91 05       	cpc	r25, r1
    2364:	7c f1       	brlt	.+94     	; 0x23c4 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2366:	2b 81       	ldd	r18, Y+3	; 0x03
    2368:	3c 81       	ldd	r19, Y+4	; 0x04
    236a:	2f 30       	cpi	r18, 0x0F	; 15
    236c:	31 05       	cpc	r19, r1
    236e:	79 f1       	breq	.+94     	; 0x23ce <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	9c 81       	ldd	r25, Y+4	; 0x04
    2374:	80 31       	cpi	r24, 0x10	; 16
    2376:	91 05       	cpc	r25, r1
    2378:	69 f1       	breq	.+90     	; 0x23d4 <KEYPAD_4x4_adjustKeyNumber+0x134>
    237a:	2f c0       	rjmp	.+94     	; 0x23da <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    237c:	87 e0       	ldi	r24, 0x07	; 7
    237e:	89 83       	std	Y+1, r24	; 0x01
    2380:	2e c0       	rjmp	.+92     	; 0x23de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2382:	88 e0       	ldi	r24, 0x08	; 8
    2384:	89 83       	std	Y+1, r24	; 0x01
    2386:	2b c0       	rjmp	.+86     	; 0x23de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2388:	89 e0       	ldi	r24, 0x09	; 9
    238a:	89 83       	std	Y+1, r24	; 0x01
    238c:	28 c0       	rjmp	.+80     	; 0x23de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    238e:	85 e2       	ldi	r24, 0x25	; 37
    2390:	89 83       	std	Y+1, r24	; 0x01
    2392:	25 c0       	rjmp	.+74     	; 0x23de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2394:	84 e0       	ldi	r24, 0x04	; 4
    2396:	89 83       	std	Y+1, r24	; 0x01
    2398:	22 c0       	rjmp	.+68     	; 0x23de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    239a:	85 e0       	ldi	r24, 0x05	; 5
    239c:	89 83       	std	Y+1, r24	; 0x01
    239e:	1f c0       	rjmp	.+62     	; 0x23de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    23a0:	86 e0       	ldi	r24, 0x06	; 6
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	1c c0       	rjmp	.+56     	; 0x23de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    23a6:	8a e2       	ldi	r24, 0x2A	; 42
    23a8:	89 83       	std	Y+1, r24	; 0x01
    23aa:	19 c0       	rjmp	.+50     	; 0x23de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	16 c0       	rjmp	.+44     	; 0x23de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    23b2:	82 e0       	ldi	r24, 0x02	; 2
    23b4:	89 83       	std	Y+1, r24	; 0x01
    23b6:	13 c0       	rjmp	.+38     	; 0x23de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    23b8:	83 e0       	ldi	r24, 0x03	; 3
    23ba:	89 83       	std	Y+1, r24	; 0x01
    23bc:	10 c0       	rjmp	.+32     	; 0x23de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    23be:	8d e2       	ldi	r24, 0x2D	; 45
    23c0:	89 83       	std	Y+1, r24	; 0x01
    23c2:	0d c0       	rjmp	.+26     	; 0x23de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = '#';  /* ASCII of Enter */
    23c4:	83 e2       	ldi	r24, 0x23	; 35
    23c6:	89 83       	std	Y+1, r24	; 0x01
    23c8:	0a c0       	rjmp	.+20     	; 0x23de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    23ca:	19 82       	std	Y+1, r1	; 0x01
    23cc:	08 c0       	rjmp	.+16     	; 0x23de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    23ce:	8d e3       	ldi	r24, 0x3D	; 61
    23d0:	89 83       	std	Y+1, r24	; 0x01
    23d2:	05 c0       	rjmp	.+10     	; 0x23de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    23d4:	8b e2       	ldi	r24, 0x2B	; 43
    23d6:	89 83       	std	Y+1, r24	; 0x01
    23d8:	02 c0       	rjmp	.+4      	; 0x23de <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    23de:	89 81       	ldd	r24, Y+1	; 0x01
}
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
    23f6:	2e 97       	sbiw	r28, 0x0e	; 14
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS ,RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2402:	83 e0       	ldi	r24, 0x03	; 3
    2404:	65 e0       	ldi	r22, 0x05	; 5
    2406:	41 e0       	ldi	r20, 0x01	; 1
    2408:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    240c:	83 e0       	ldi	r24, 0x03	; 3
    240e:	66 e0       	ldi	r22, 0x06	; 6
    2410:	41 e0       	ldi	r20, 0x01	; 1
    2412:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2416:	83 e0       	ldi	r24, 0x03	; 3
    2418:	67 e0       	ldi	r22, 0x07	; 7
    241a:	41 e0       	ldi	r20, 0x01	; 1
    241c:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <GPIO_setupPinDirection>

	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* Instruction Mode RW=0 */
    2420:	83 e0       	ldi	r24, 0x03	; 3
    2422:	66 e0       	ldi	r22, 0x06	; 6
    2424:	40 e0       	ldi	r20, 0x00	; 0
    2426:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <GPIO_writePin>
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	a0 ea       	ldi	r26, 0xA0	; 160
    2430:	b1 e4       	ldi	r27, 0x41	; 65
    2432:	8b 87       	std	Y+11, r24	; 0x0b
    2434:	9c 87       	std	Y+12, r25	; 0x0c
    2436:	ad 87       	std	Y+13, r26	; 0x0d
    2438:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243a:	6b 85       	ldd	r22, Y+11	; 0x0b
    243c:	7c 85       	ldd	r23, Y+12	; 0x0c
    243e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2440:	9e 85       	ldd	r25, Y+14	; 0x0e
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	4a ef       	ldi	r20, 0xFA	; 250
    2448:	54 e4       	ldi	r21, 0x44	; 68
    244a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	8f 83       	std	Y+7, r24	; 0x07
    2454:	98 87       	std	Y+8, r25	; 0x08
    2456:	a9 87       	std	Y+9, r26	; 0x09
    2458:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    245a:	6f 81       	ldd	r22, Y+7	; 0x07
    245c:	78 85       	ldd	r23, Y+8	; 0x08
    245e:	89 85       	ldd	r24, Y+9	; 0x09
    2460:	9a 85       	ldd	r25, Y+10	; 0x0a
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	40 e8       	ldi	r20, 0x80	; 128
    2468:	5f e3       	ldi	r21, 0x3F	; 63
    246a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    246e:	88 23       	and	r24, r24
    2470:	2c f4       	brge	.+10     	; 0x247c <LCD_init+0x8e>
		__ticks = 1;
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	9e 83       	std	Y+6, r25	; 0x06
    2478:	8d 83       	std	Y+5, r24	; 0x05
    247a:	3f c0       	rjmp	.+126    	; 0x24fa <LCD_init+0x10c>
	else if (__tmp > 65535)
    247c:	6f 81       	ldd	r22, Y+7	; 0x07
    247e:	78 85       	ldd	r23, Y+8	; 0x08
    2480:	89 85       	ldd	r24, Y+9	; 0x09
    2482:	9a 85       	ldd	r25, Y+10	; 0x0a
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	3f ef       	ldi	r19, 0xFF	; 255
    2488:	4f e7       	ldi	r20, 0x7F	; 127
    248a:	57 e4       	ldi	r21, 0x47	; 71
    248c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2490:	18 16       	cp	r1, r24
    2492:	4c f5       	brge	.+82     	; 0x24e6 <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2494:	6b 85       	ldd	r22, Y+11	; 0x0b
    2496:	7c 85       	ldd	r23, Y+12	; 0x0c
    2498:	8d 85       	ldd	r24, Y+13	; 0x0d
    249a:	9e 85       	ldd	r25, Y+14	; 0x0e
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	40 e2       	ldi	r20, 0x20	; 32
    24a2:	51 e4       	ldi	r21, 0x41	; 65
    24a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	bc 01       	movw	r22, r24
    24ae:	cd 01       	movw	r24, r26
    24b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	9e 83       	std	Y+6, r25	; 0x06
    24ba:	8d 83       	std	Y+5, r24	; 0x05
    24bc:	0f c0       	rjmp	.+30     	; 0x24dc <LCD_init+0xee>
    24be:	88 ec       	ldi	r24, 0xC8	; 200
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	9c 83       	std	Y+4, r25	; 0x04
    24c4:	8b 83       	std	Y+3, r24	; 0x03
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	f1 f7       	brne	.-4      	; 0x24ca <LCD_init+0xdc>
    24ce:	9c 83       	std	Y+4, r25	; 0x04
    24d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d2:	8d 81       	ldd	r24, Y+5	; 0x05
    24d4:	9e 81       	ldd	r25, Y+6	; 0x06
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	9e 83       	std	Y+6, r25	; 0x06
    24da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24dc:	8d 81       	ldd	r24, Y+5	; 0x05
    24de:	9e 81       	ldd	r25, Y+6	; 0x06
    24e0:	00 97       	sbiw	r24, 0x00	; 0
    24e2:	69 f7       	brne	.-38     	; 0x24be <LCD_init+0xd0>
    24e4:	14 c0       	rjmp	.+40     	; 0x250e <LCD_init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e6:	6f 81       	ldd	r22, Y+7	; 0x07
    24e8:	78 85       	ldd	r23, Y+8	; 0x08
    24ea:	89 85       	ldd	r24, Y+9	; 0x09
    24ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	9e 83       	std	Y+6, r25	; 0x06
    24f8:	8d 83       	std	Y+5, r24	; 0x05
    24fa:	8d 81       	ldd	r24, Y+5	; 0x05
    24fc:	9e 81       	ldd	r25, Y+6	; 0x06
    24fe:	9a 83       	std	Y+2, r25	; 0x02
    2500:	89 83       	std	Y+1, r24	; 0x01
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	9a 81       	ldd	r25, Y+2	; 0x02
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	f1 f7       	brne	.-4      	; 0x2506 <LCD_init+0x118>
    250a:	9a 83       	std	Y+2, r25	; 0x02
    250c:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    250e:	82 e0       	ldi	r24, 0x02	; 2
    2510:	6f ef       	ldi	r22, 0xFF	; 255
    2512:	0e 94 07 10 	call	0x200e	; 0x200e <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2516:	88 e3       	ldi	r24, 0x38	; 56
    2518:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    251c:	8c e0       	ldi	r24, 0x0C	; 12
    251e:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
}
    2528:	2e 96       	adiw	r28, 0x0e	; 14
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	de bf       	out	0x3e, r29	; 62
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	cd bf       	out	0x3d, r28	; 61
    2534:	cf 91       	pop	r28
    2536:	df 91       	pop	r29
    2538:	08 95       	ret

0000253a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    253a:	df 93       	push	r29
    253c:	cf 93       	push	r28
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
    2542:	e9 97       	sbiw	r28, 0x39	; 57
    2544:	0f b6       	in	r0, 0x3f	; 63
    2546:	f8 94       	cli
    2548:	de bf       	out	0x3e, r29	; 62
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	cd bf       	out	0x3d, r28	; 61
    254e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2550:	83 e0       	ldi	r24, 0x03	; 3
    2552:	65 e0       	ldi	r22, 0x05	; 5
    2554:	40 e0       	ldi	r20, 0x00	; 0
    2556:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <GPIO_writePin>
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	a0 e8       	ldi	r26, 0x80	; 128
    2560:	bf e3       	ldi	r27, 0x3F	; 63
    2562:	8d ab       	std	Y+53, r24	; 0x35
    2564:	9e ab       	std	Y+54, r25	; 0x36
    2566:	af ab       	std	Y+55, r26	; 0x37
    2568:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256a:	6d a9       	ldd	r22, Y+53	; 0x35
    256c:	7e a9       	ldd	r23, Y+54	; 0x36
    256e:	8f a9       	ldd	r24, Y+55	; 0x37
    2570:	98 ad       	ldd	r25, Y+56	; 0x38
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	4a ef       	ldi	r20, 0xFA	; 250
    2578:	54 e4       	ldi	r21, 0x44	; 68
    257a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	89 ab       	std	Y+49, r24	; 0x31
    2584:	9a ab       	std	Y+50, r25	; 0x32
    2586:	ab ab       	std	Y+51, r26	; 0x33
    2588:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    258a:	69 a9       	ldd	r22, Y+49	; 0x31
    258c:	7a a9       	ldd	r23, Y+50	; 0x32
    258e:	8b a9       	ldd	r24, Y+51	; 0x33
    2590:	9c a9       	ldd	r25, Y+52	; 0x34
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	40 e8       	ldi	r20, 0x80	; 128
    2598:	5f e3       	ldi	r21, 0x3F	; 63
    259a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    259e:	88 23       	and	r24, r24
    25a0:	2c f4       	brge	.+10     	; 0x25ac <LCD_sendCommand+0x72>
		__ticks = 1;
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	98 ab       	std	Y+48, r25	; 0x30
    25a8:	8f a7       	std	Y+47, r24	; 0x2f
    25aa:	3f c0       	rjmp	.+126    	; 0x262a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    25ac:	69 a9       	ldd	r22, Y+49	; 0x31
    25ae:	7a a9       	ldd	r23, Y+50	; 0x32
    25b0:	8b a9       	ldd	r24, Y+51	; 0x33
    25b2:	9c a9       	ldd	r25, Y+52	; 0x34
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	3f ef       	ldi	r19, 0xFF	; 255
    25b8:	4f e7       	ldi	r20, 0x7F	; 127
    25ba:	57 e4       	ldi	r21, 0x47	; 71
    25bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c0:	18 16       	cp	r1, r24
    25c2:	4c f5       	brge	.+82     	; 0x2616 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c4:	6d a9       	ldd	r22, Y+53	; 0x35
    25c6:	7e a9       	ldd	r23, Y+54	; 0x36
    25c8:	8f a9       	ldd	r24, Y+55	; 0x37
    25ca:	98 ad       	ldd	r25, Y+56	; 0x38
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e2       	ldi	r20, 0x20	; 32
    25d2:	51 e4       	ldi	r21, 0x41	; 65
    25d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	bc 01       	movw	r22, r24
    25de:	cd 01       	movw	r24, r26
    25e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	98 ab       	std	Y+48, r25	; 0x30
    25ea:	8f a7       	std	Y+47, r24	; 0x2f
    25ec:	0f c0       	rjmp	.+30     	; 0x260c <LCD_sendCommand+0xd2>
    25ee:	88 ec       	ldi	r24, 0xC8	; 200
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	9e a7       	std	Y+46, r25	; 0x2e
    25f4:	8d a7       	std	Y+45, r24	; 0x2d
    25f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    25f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	f1 f7       	brne	.-4      	; 0x25fa <LCD_sendCommand+0xc0>
    25fe:	9e a7       	std	Y+46, r25	; 0x2e
    2600:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2602:	8f a5       	ldd	r24, Y+47	; 0x2f
    2604:	98 a9       	ldd	r25, Y+48	; 0x30
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	98 ab       	std	Y+48, r25	; 0x30
    260a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260c:	8f a5       	ldd	r24, Y+47	; 0x2f
    260e:	98 a9       	ldd	r25, Y+48	; 0x30
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	69 f7       	brne	.-38     	; 0x25ee <LCD_sendCommand+0xb4>
    2614:	14 c0       	rjmp	.+40     	; 0x263e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2616:	69 a9       	ldd	r22, Y+49	; 0x31
    2618:	7a a9       	ldd	r23, Y+50	; 0x32
    261a:	8b a9       	ldd	r24, Y+51	; 0x33
    261c:	9c a9       	ldd	r25, Y+52	; 0x34
    261e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	98 ab       	std	Y+48, r25	; 0x30
    2628:	8f a7       	std	Y+47, r24	; 0x2f
    262a:	8f a5       	ldd	r24, Y+47	; 0x2f
    262c:	98 a9       	ldd	r25, Y+48	; 0x30
    262e:	9c a7       	std	Y+44, r25	; 0x2c
    2630:	8b a7       	std	Y+43, r24	; 0x2b
    2632:	8b a5       	ldd	r24, Y+43	; 0x2b
    2634:	9c a5       	ldd	r25, Y+44	; 0x2c
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	f1 f7       	brne	.-4      	; 0x2636 <LCD_sendCommand+0xfc>
    263a:	9c a7       	std	Y+44, r25	; 0x2c
    263c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    263e:	83 e0       	ldi	r24, 0x03	; 3
    2640:	67 e0       	ldi	r22, 0x07	; 7
    2642:	41 e0       	ldi	r20, 0x01	; 1
    2644:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <GPIO_writePin>
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	a0 e8       	ldi	r26, 0x80	; 128
    264e:	bf e3       	ldi	r27, 0x3F	; 63
    2650:	8f a3       	std	Y+39, r24	; 0x27
    2652:	98 a7       	std	Y+40, r25	; 0x28
    2654:	a9 a7       	std	Y+41, r26	; 0x29
    2656:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2658:	6f a1       	ldd	r22, Y+39	; 0x27
    265a:	78 a5       	ldd	r23, Y+40	; 0x28
    265c:	89 a5       	ldd	r24, Y+41	; 0x29
    265e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	4a ef       	ldi	r20, 0xFA	; 250
    2666:	54 e4       	ldi	r21, 0x44	; 68
    2668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	8b a3       	std	Y+35, r24	; 0x23
    2672:	9c a3       	std	Y+36, r25	; 0x24
    2674:	ad a3       	std	Y+37, r26	; 0x25
    2676:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2678:	6b a1       	ldd	r22, Y+35	; 0x23
    267a:	7c a1       	ldd	r23, Y+36	; 0x24
    267c:	8d a1       	ldd	r24, Y+37	; 0x25
    267e:	9e a1       	ldd	r25, Y+38	; 0x26
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e8       	ldi	r20, 0x80	; 128
    2686:	5f e3       	ldi	r21, 0x3F	; 63
    2688:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    268c:	88 23       	and	r24, r24
    268e:	2c f4       	brge	.+10     	; 0x269a <LCD_sendCommand+0x160>
		__ticks = 1;
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	9a a3       	std	Y+34, r25	; 0x22
    2696:	89 a3       	std	Y+33, r24	; 0x21
    2698:	3f c0       	rjmp	.+126    	; 0x2718 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    269a:	6b a1       	ldd	r22, Y+35	; 0x23
    269c:	7c a1       	ldd	r23, Y+36	; 0x24
    269e:	8d a1       	ldd	r24, Y+37	; 0x25
    26a0:	9e a1       	ldd	r25, Y+38	; 0x26
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	3f ef       	ldi	r19, 0xFF	; 255
    26a6:	4f e7       	ldi	r20, 0x7F	; 127
    26a8:	57 e4       	ldi	r21, 0x47	; 71
    26aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ae:	18 16       	cp	r1, r24
    26b0:	4c f5       	brge	.+82     	; 0x2704 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b2:	6f a1       	ldd	r22, Y+39	; 0x27
    26b4:	78 a5       	ldd	r23, Y+40	; 0x28
    26b6:	89 a5       	ldd	r24, Y+41	; 0x29
    26b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	40 e2       	ldi	r20, 0x20	; 32
    26c0:	51 e4       	ldi	r21, 0x41	; 65
    26c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	bc 01       	movw	r22, r24
    26cc:	cd 01       	movw	r24, r26
    26ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	9a a3       	std	Y+34, r25	; 0x22
    26d8:	89 a3       	std	Y+33, r24	; 0x21
    26da:	0f c0       	rjmp	.+30     	; 0x26fa <LCD_sendCommand+0x1c0>
    26dc:	88 ec       	ldi	r24, 0xC8	; 200
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	98 a3       	std	Y+32, r25	; 0x20
    26e2:	8f 8f       	std	Y+31, r24	; 0x1f
    26e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26e6:	98 a1       	ldd	r25, Y+32	; 0x20
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	f1 f7       	brne	.-4      	; 0x26e8 <LCD_sendCommand+0x1ae>
    26ec:	98 a3       	std	Y+32, r25	; 0x20
    26ee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f0:	89 a1       	ldd	r24, Y+33	; 0x21
    26f2:	9a a1       	ldd	r25, Y+34	; 0x22
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	9a a3       	std	Y+34, r25	; 0x22
    26f8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26fa:	89 a1       	ldd	r24, Y+33	; 0x21
    26fc:	9a a1       	ldd	r25, Y+34	; 0x22
    26fe:	00 97       	sbiw	r24, 0x00	; 0
    2700:	69 f7       	brne	.-38     	; 0x26dc <LCD_sendCommand+0x1a2>
    2702:	14 c0       	rjmp	.+40     	; 0x272c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2704:	6b a1       	ldd	r22, Y+35	; 0x23
    2706:	7c a1       	ldd	r23, Y+36	; 0x24
    2708:	8d a1       	ldd	r24, Y+37	; 0x25
    270a:	9e a1       	ldd	r25, Y+38	; 0x26
    270c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	9a a3       	std	Y+34, r25	; 0x22
    2716:	89 a3       	std	Y+33, r24	; 0x21
    2718:	89 a1       	ldd	r24, Y+33	; 0x21
    271a:	9a a1       	ldd	r25, Y+34	; 0x22
    271c:	9e 8f       	std	Y+30, r25	; 0x1e
    271e:	8d 8f       	std	Y+29, r24	; 0x1d
    2720:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2722:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	f1 f7       	brne	.-4      	; 0x2724 <LCD_sendCommand+0x1ea>
    2728:	9e 8f       	std	Y+30, r25	; 0x1e
    272a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    272c:	82 e0       	ldi	r24, 0x02	; 2
    272e:	69 ad       	ldd	r22, Y+57	; 0x39
    2730:	0e 94 4b 10 	call	0x2096	; 0x2096 <GPIO_writePort>
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	a0 e8       	ldi	r26, 0x80	; 128
    273a:	bf e3       	ldi	r27, 0x3F	; 63
    273c:	89 8f       	std	Y+25, r24	; 0x19
    273e:	9a 8f       	std	Y+26, r25	; 0x1a
    2740:	ab 8f       	std	Y+27, r26	; 0x1b
    2742:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2744:	69 8d       	ldd	r22, Y+25	; 0x19
    2746:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2748:	8b 8d       	ldd	r24, Y+27	; 0x1b
    274a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	4a ef       	ldi	r20, 0xFA	; 250
    2752:	54 e4       	ldi	r21, 0x44	; 68
    2754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	8d 8b       	std	Y+21, r24	; 0x15
    275e:	9e 8b       	std	Y+22, r25	; 0x16
    2760:	af 8b       	std	Y+23, r26	; 0x17
    2762:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2764:	6d 89       	ldd	r22, Y+21	; 0x15
    2766:	7e 89       	ldd	r23, Y+22	; 0x16
    2768:	8f 89       	ldd	r24, Y+23	; 0x17
    276a:	98 8d       	ldd	r25, Y+24	; 0x18
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	40 e8       	ldi	r20, 0x80	; 128
    2772:	5f e3       	ldi	r21, 0x3F	; 63
    2774:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2778:	88 23       	and	r24, r24
    277a:	2c f4       	brge	.+10     	; 0x2786 <LCD_sendCommand+0x24c>
		__ticks = 1;
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	9c 8b       	std	Y+20, r25	; 0x14
    2782:	8b 8b       	std	Y+19, r24	; 0x13
    2784:	3f c0       	rjmp	.+126    	; 0x2804 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2786:	6d 89       	ldd	r22, Y+21	; 0x15
    2788:	7e 89       	ldd	r23, Y+22	; 0x16
    278a:	8f 89       	ldd	r24, Y+23	; 0x17
    278c:	98 8d       	ldd	r25, Y+24	; 0x18
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	3f ef       	ldi	r19, 0xFF	; 255
    2792:	4f e7       	ldi	r20, 0x7F	; 127
    2794:	57 e4       	ldi	r21, 0x47	; 71
    2796:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    279a:	18 16       	cp	r1, r24
    279c:	4c f5       	brge	.+82     	; 0x27f0 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    279e:	69 8d       	ldd	r22, Y+25	; 0x19
    27a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	40 e2       	ldi	r20, 0x20	; 32
    27ac:	51 e4       	ldi	r21, 0x41	; 65
    27ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	bc 01       	movw	r22, r24
    27b8:	cd 01       	movw	r24, r26
    27ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	9c 8b       	std	Y+20, r25	; 0x14
    27c4:	8b 8b       	std	Y+19, r24	; 0x13
    27c6:	0f c0       	rjmp	.+30     	; 0x27e6 <LCD_sendCommand+0x2ac>
    27c8:	88 ec       	ldi	r24, 0xC8	; 200
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	9a 8b       	std	Y+18, r25	; 0x12
    27ce:	89 8b       	std	Y+17, r24	; 0x11
    27d0:	89 89       	ldd	r24, Y+17	; 0x11
    27d2:	9a 89       	ldd	r25, Y+18	; 0x12
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	f1 f7       	brne	.-4      	; 0x27d4 <LCD_sendCommand+0x29a>
    27d8:	9a 8b       	std	Y+18, r25	; 0x12
    27da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27dc:	8b 89       	ldd	r24, Y+19	; 0x13
    27de:	9c 89       	ldd	r25, Y+20	; 0x14
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	9c 8b       	std	Y+20, r25	; 0x14
    27e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e6:	8b 89       	ldd	r24, Y+19	; 0x13
    27e8:	9c 89       	ldd	r25, Y+20	; 0x14
    27ea:	00 97       	sbiw	r24, 0x00	; 0
    27ec:	69 f7       	brne	.-38     	; 0x27c8 <LCD_sendCommand+0x28e>
    27ee:	14 c0       	rjmp	.+40     	; 0x2818 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f0:	6d 89       	ldd	r22, Y+21	; 0x15
    27f2:	7e 89       	ldd	r23, Y+22	; 0x16
    27f4:	8f 89       	ldd	r24, Y+23	; 0x17
    27f6:	98 8d       	ldd	r25, Y+24	; 0x18
    27f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	9c 8b       	std	Y+20, r25	; 0x14
    2802:	8b 8b       	std	Y+19, r24	; 0x13
    2804:	8b 89       	ldd	r24, Y+19	; 0x13
    2806:	9c 89       	ldd	r25, Y+20	; 0x14
    2808:	98 8b       	std	Y+16, r25	; 0x10
    280a:	8f 87       	std	Y+15, r24	; 0x0f
    280c:	8f 85       	ldd	r24, Y+15	; 0x0f
    280e:	98 89       	ldd	r25, Y+16	; 0x10
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	f1 f7       	brne	.-4      	; 0x2810 <LCD_sendCommand+0x2d6>
    2814:	98 8b       	std	Y+16, r25	; 0x10
    2816:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2818:	83 e0       	ldi	r24, 0x03	; 3
    281a:	67 e0       	ldi	r22, 0x07	; 7
    281c:	40 e0       	ldi	r20, 0x00	; 0
    281e:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <GPIO_writePin>
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	a0 e8       	ldi	r26, 0x80	; 128
    2828:	bf e3       	ldi	r27, 0x3F	; 63
    282a:	8b 87       	std	Y+11, r24	; 0x0b
    282c:	9c 87       	std	Y+12, r25	; 0x0c
    282e:	ad 87       	std	Y+13, r26	; 0x0d
    2830:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2832:	6b 85       	ldd	r22, Y+11	; 0x0b
    2834:	7c 85       	ldd	r23, Y+12	; 0x0c
    2836:	8d 85       	ldd	r24, Y+13	; 0x0d
    2838:	9e 85       	ldd	r25, Y+14	; 0x0e
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	4a ef       	ldi	r20, 0xFA	; 250
    2840:	54 e4       	ldi	r21, 0x44	; 68
    2842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	8f 83       	std	Y+7, r24	; 0x07
    284c:	98 87       	std	Y+8, r25	; 0x08
    284e:	a9 87       	std	Y+9, r26	; 0x09
    2850:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2852:	6f 81       	ldd	r22, Y+7	; 0x07
    2854:	78 85       	ldd	r23, Y+8	; 0x08
    2856:	89 85       	ldd	r24, Y+9	; 0x09
    2858:	9a 85       	ldd	r25, Y+10	; 0x0a
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e8       	ldi	r20, 0x80	; 128
    2860:	5f e3       	ldi	r21, 0x3F	; 63
    2862:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2866:	88 23       	and	r24, r24
    2868:	2c f4       	brge	.+10     	; 0x2874 <LCD_sendCommand+0x33a>
		__ticks = 1;
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	9e 83       	std	Y+6, r25	; 0x06
    2870:	8d 83       	std	Y+5, r24	; 0x05
    2872:	3f c0       	rjmp	.+126    	; 0x28f2 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2874:	6f 81       	ldd	r22, Y+7	; 0x07
    2876:	78 85       	ldd	r23, Y+8	; 0x08
    2878:	89 85       	ldd	r24, Y+9	; 0x09
    287a:	9a 85       	ldd	r25, Y+10	; 0x0a
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	3f ef       	ldi	r19, 0xFF	; 255
    2880:	4f e7       	ldi	r20, 0x7F	; 127
    2882:	57 e4       	ldi	r21, 0x47	; 71
    2884:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2888:	18 16       	cp	r1, r24
    288a:	4c f5       	brge	.+82     	; 0x28de <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    288c:	6b 85       	ldd	r22, Y+11	; 0x0b
    288e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2890:	8d 85       	ldd	r24, Y+13	; 0x0d
    2892:	9e 85       	ldd	r25, Y+14	; 0x0e
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	40 e2       	ldi	r20, 0x20	; 32
    289a:	51 e4       	ldi	r21, 0x41	; 65
    289c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	bc 01       	movw	r22, r24
    28a6:	cd 01       	movw	r24, r26
    28a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	9e 83       	std	Y+6, r25	; 0x06
    28b2:	8d 83       	std	Y+5, r24	; 0x05
    28b4:	0f c0       	rjmp	.+30     	; 0x28d4 <LCD_sendCommand+0x39a>
    28b6:	88 ec       	ldi	r24, 0xC8	; 200
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	9c 83       	std	Y+4, r25	; 0x04
    28bc:	8b 83       	std	Y+3, r24	; 0x03
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	9c 81       	ldd	r25, Y+4	; 0x04
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	f1 f7       	brne	.-4      	; 0x28c2 <LCD_sendCommand+0x388>
    28c6:	9c 83       	std	Y+4, r25	; 0x04
    28c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ca:	8d 81       	ldd	r24, Y+5	; 0x05
    28cc:	9e 81       	ldd	r25, Y+6	; 0x06
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	9e 83       	std	Y+6, r25	; 0x06
    28d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d4:	8d 81       	ldd	r24, Y+5	; 0x05
    28d6:	9e 81       	ldd	r25, Y+6	; 0x06
    28d8:	00 97       	sbiw	r24, 0x00	; 0
    28da:	69 f7       	brne	.-38     	; 0x28b6 <LCD_sendCommand+0x37c>
    28dc:	14 c0       	rjmp	.+40     	; 0x2906 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28de:	6f 81       	ldd	r22, Y+7	; 0x07
    28e0:	78 85       	ldd	r23, Y+8	; 0x08
    28e2:	89 85       	ldd	r24, Y+9	; 0x09
    28e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	9e 83       	std	Y+6, r25	; 0x06
    28f0:	8d 83       	std	Y+5, r24	; 0x05
    28f2:	8d 81       	ldd	r24, Y+5	; 0x05
    28f4:	9e 81       	ldd	r25, Y+6	; 0x06
    28f6:	9a 83       	std	Y+2, r25	; 0x02
    28f8:	89 83       	std	Y+1, r24	; 0x01
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	9a 81       	ldd	r25, Y+2	; 0x02
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	f1 f7       	brne	.-4      	; 0x28fe <LCD_sendCommand+0x3c4>
    2902:	9a 83       	std	Y+2, r25	; 0x02
    2904:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2906:	e9 96       	adiw	r28, 0x39	; 57
    2908:	0f b6       	in	r0, 0x3f	; 63
    290a:	f8 94       	cli
    290c:	de bf       	out	0x3e, r29	; 62
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	cd bf       	out	0x3d, r28	; 61
    2912:	cf 91       	pop	r28
    2914:	df 91       	pop	r29
    2916:	08 95       	ret

00002918 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2918:	df 93       	push	r29
    291a:	cf 93       	push	r28
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	e9 97       	sbiw	r28, 0x39	; 57
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	f8 94       	cli
    2926:	de bf       	out	0x3e, r29	; 62
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	cd bf       	out	0x3d, r28	; 61
    292c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    292e:	83 e0       	ldi	r24, 0x03	; 3
    2930:	65 e0       	ldi	r22, 0x05	; 5
    2932:	41 e0       	ldi	r20, 0x01	; 1
    2934:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <GPIO_writePin>
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	a0 e8       	ldi	r26, 0x80	; 128
    293e:	bf e3       	ldi	r27, 0x3F	; 63
    2940:	8d ab       	std	Y+53, r24	; 0x35
    2942:	9e ab       	std	Y+54, r25	; 0x36
    2944:	af ab       	std	Y+55, r26	; 0x37
    2946:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2948:	6d a9       	ldd	r22, Y+53	; 0x35
    294a:	7e a9       	ldd	r23, Y+54	; 0x36
    294c:	8f a9       	ldd	r24, Y+55	; 0x37
    294e:	98 ad       	ldd	r25, Y+56	; 0x38
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	4a ef       	ldi	r20, 0xFA	; 250
    2956:	54 e4       	ldi	r21, 0x44	; 68
    2958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	89 ab       	std	Y+49, r24	; 0x31
    2962:	9a ab       	std	Y+50, r25	; 0x32
    2964:	ab ab       	std	Y+51, r26	; 0x33
    2966:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2968:	69 a9       	ldd	r22, Y+49	; 0x31
    296a:	7a a9       	ldd	r23, Y+50	; 0x32
    296c:	8b a9       	ldd	r24, Y+51	; 0x33
    296e:	9c a9       	ldd	r25, Y+52	; 0x34
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	40 e8       	ldi	r20, 0x80	; 128
    2976:	5f e3       	ldi	r21, 0x3F	; 63
    2978:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    297c:	88 23       	and	r24, r24
    297e:	2c f4       	brge	.+10     	; 0x298a <LCD_displayCharacter+0x72>
		__ticks = 1;
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	98 ab       	std	Y+48, r25	; 0x30
    2986:	8f a7       	std	Y+47, r24	; 0x2f
    2988:	3f c0       	rjmp	.+126    	; 0x2a08 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    298a:	69 a9       	ldd	r22, Y+49	; 0x31
    298c:	7a a9       	ldd	r23, Y+50	; 0x32
    298e:	8b a9       	ldd	r24, Y+51	; 0x33
    2990:	9c a9       	ldd	r25, Y+52	; 0x34
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	3f ef       	ldi	r19, 0xFF	; 255
    2996:	4f e7       	ldi	r20, 0x7F	; 127
    2998:	57 e4       	ldi	r21, 0x47	; 71
    299a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    299e:	18 16       	cp	r1, r24
    29a0:	4c f5       	brge	.+82     	; 0x29f4 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a2:	6d a9       	ldd	r22, Y+53	; 0x35
    29a4:	7e a9       	ldd	r23, Y+54	; 0x36
    29a6:	8f a9       	ldd	r24, Y+55	; 0x37
    29a8:	98 ad       	ldd	r25, Y+56	; 0x38
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	40 e2       	ldi	r20, 0x20	; 32
    29b0:	51 e4       	ldi	r21, 0x41	; 65
    29b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	bc 01       	movw	r22, r24
    29bc:	cd 01       	movw	r24, r26
    29be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	98 ab       	std	Y+48, r25	; 0x30
    29c8:	8f a7       	std	Y+47, r24	; 0x2f
    29ca:	0f c0       	rjmp	.+30     	; 0x29ea <LCD_displayCharacter+0xd2>
    29cc:	88 ec       	ldi	r24, 0xC8	; 200
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	9e a7       	std	Y+46, r25	; 0x2e
    29d2:	8d a7       	std	Y+45, r24	; 0x2d
    29d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    29d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	f1 f7       	brne	.-4      	; 0x29d8 <LCD_displayCharacter+0xc0>
    29dc:	9e a7       	std	Y+46, r25	; 0x2e
    29de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    29e2:	98 a9       	ldd	r25, Y+48	; 0x30
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	98 ab       	std	Y+48, r25	; 0x30
    29e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ec:	98 a9       	ldd	r25, Y+48	; 0x30
    29ee:	00 97       	sbiw	r24, 0x00	; 0
    29f0:	69 f7       	brne	.-38     	; 0x29cc <LCD_displayCharacter+0xb4>
    29f2:	14 c0       	rjmp	.+40     	; 0x2a1c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f4:	69 a9       	ldd	r22, Y+49	; 0x31
    29f6:	7a a9       	ldd	r23, Y+50	; 0x32
    29f8:	8b a9       	ldd	r24, Y+51	; 0x33
    29fa:	9c a9       	ldd	r25, Y+52	; 0x34
    29fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	98 ab       	std	Y+48, r25	; 0x30
    2a06:	8f a7       	std	Y+47, r24	; 0x2f
    2a08:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a0a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a0c:	9c a7       	std	Y+44, r25	; 0x2c
    2a0e:	8b a7       	std	Y+43, r24	; 0x2b
    2a10:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a12:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <LCD_displayCharacter+0xfc>
    2a18:	9c a7       	std	Y+44, r25	; 0x2c
    2a1a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2a1c:	83 e0       	ldi	r24, 0x03	; 3
    2a1e:	67 e0       	ldi	r22, 0x07	; 7
    2a20:	41 e0       	ldi	r20, 0x01	; 1
    2a22:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <GPIO_writePin>
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	a0 e8       	ldi	r26, 0x80	; 128
    2a2c:	bf e3       	ldi	r27, 0x3F	; 63
    2a2e:	8f a3       	std	Y+39, r24	; 0x27
    2a30:	98 a7       	std	Y+40, r25	; 0x28
    2a32:	a9 a7       	std	Y+41, r26	; 0x29
    2a34:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a36:	6f a1       	ldd	r22, Y+39	; 0x27
    2a38:	78 a5       	ldd	r23, Y+40	; 0x28
    2a3a:	89 a5       	ldd	r24, Y+41	; 0x29
    2a3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	4a ef       	ldi	r20, 0xFA	; 250
    2a44:	54 e4       	ldi	r21, 0x44	; 68
    2a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	8b a3       	std	Y+35, r24	; 0x23
    2a50:	9c a3       	std	Y+36, r25	; 0x24
    2a52:	ad a3       	std	Y+37, r26	; 0x25
    2a54:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a56:	6b a1       	ldd	r22, Y+35	; 0x23
    2a58:	7c a1       	ldd	r23, Y+36	; 0x24
    2a5a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a5c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e8       	ldi	r20, 0x80	; 128
    2a64:	5f e3       	ldi	r21, 0x3F	; 63
    2a66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a6a:	88 23       	and	r24, r24
    2a6c:	2c f4       	brge	.+10     	; 0x2a78 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	9a a3       	std	Y+34, r25	; 0x22
    2a74:	89 a3       	std	Y+33, r24	; 0x21
    2a76:	3f c0       	rjmp	.+126    	; 0x2af6 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2a78:	6b a1       	ldd	r22, Y+35	; 0x23
    2a7a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a7c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a7e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	3f ef       	ldi	r19, 0xFF	; 255
    2a84:	4f e7       	ldi	r20, 0x7F	; 127
    2a86:	57 e4       	ldi	r21, 0x47	; 71
    2a88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a8c:	18 16       	cp	r1, r24
    2a8e:	4c f5       	brge	.+82     	; 0x2ae2 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a90:	6f a1       	ldd	r22, Y+39	; 0x27
    2a92:	78 a5       	ldd	r23, Y+40	; 0x28
    2a94:	89 a5       	ldd	r24, Y+41	; 0x29
    2a96:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	40 e2       	ldi	r20, 0x20	; 32
    2a9e:	51 e4       	ldi	r21, 0x41	; 65
    2aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	bc 01       	movw	r22, r24
    2aaa:	cd 01       	movw	r24, r26
    2aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	9a a3       	std	Y+34, r25	; 0x22
    2ab6:	89 a3       	std	Y+33, r24	; 0x21
    2ab8:	0f c0       	rjmp	.+30     	; 0x2ad8 <LCD_displayCharacter+0x1c0>
    2aba:	88 ec       	ldi	r24, 0xC8	; 200
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	98 a3       	std	Y+32, r25	; 0x20
    2ac0:	8f 8f       	std	Y+31, r24	; 0x1f
    2ac2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ac4:	98 a1       	ldd	r25, Y+32	; 0x20
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	f1 f7       	brne	.-4      	; 0x2ac6 <LCD_displayCharacter+0x1ae>
    2aca:	98 a3       	std	Y+32, r25	; 0x20
    2acc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ace:	89 a1       	ldd	r24, Y+33	; 0x21
    2ad0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ad2:	01 97       	sbiw	r24, 0x01	; 1
    2ad4:	9a a3       	std	Y+34, r25	; 0x22
    2ad6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad8:	89 a1       	ldd	r24, Y+33	; 0x21
    2ada:	9a a1       	ldd	r25, Y+34	; 0x22
    2adc:	00 97       	sbiw	r24, 0x00	; 0
    2ade:	69 f7       	brne	.-38     	; 0x2aba <LCD_displayCharacter+0x1a2>
    2ae0:	14 c0       	rjmp	.+40     	; 0x2b0a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ae4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ae6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ae8:	9e a1       	ldd	r25, Y+38	; 0x26
    2aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	9a a3       	std	Y+34, r25	; 0x22
    2af4:	89 a3       	std	Y+33, r24	; 0x21
    2af6:	89 a1       	ldd	r24, Y+33	; 0x21
    2af8:	9a a1       	ldd	r25, Y+34	; 0x22
    2afa:	9e 8f       	std	Y+30, r25	; 0x1e
    2afc:	8d 8f       	std	Y+29, r24	; 0x1d
    2afe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b00:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	f1 f7       	brne	.-4      	; 0x2b02 <LCD_displayCharacter+0x1ea>
    2b06:	9e 8f       	std	Y+30, r25	; 0x1e
    2b08:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2b0a:	82 e0       	ldi	r24, 0x02	; 2
    2b0c:	69 ad       	ldd	r22, Y+57	; 0x39
    2b0e:	0e 94 4b 10 	call	0x2096	; 0x2096 <GPIO_writePort>
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	a0 e8       	ldi	r26, 0x80	; 128
    2b18:	bf e3       	ldi	r27, 0x3F	; 63
    2b1a:	89 8f       	std	Y+25, r24	; 0x19
    2b1c:	9a 8f       	std	Y+26, r25	; 0x1a
    2b1e:	ab 8f       	std	Y+27, r26	; 0x1b
    2b20:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b22:	69 8d       	ldd	r22, Y+25	; 0x19
    2b24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	4a ef       	ldi	r20, 0xFA	; 250
    2b30:	54 e4       	ldi	r21, 0x44	; 68
    2b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	8d 8b       	std	Y+21, r24	; 0x15
    2b3c:	9e 8b       	std	Y+22, r25	; 0x16
    2b3e:	af 8b       	std	Y+23, r26	; 0x17
    2b40:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b42:	6d 89       	ldd	r22, Y+21	; 0x15
    2b44:	7e 89       	ldd	r23, Y+22	; 0x16
    2b46:	8f 89       	ldd	r24, Y+23	; 0x17
    2b48:	98 8d       	ldd	r25, Y+24	; 0x18
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	40 e8       	ldi	r20, 0x80	; 128
    2b50:	5f e3       	ldi	r21, 0x3F	; 63
    2b52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b56:	88 23       	and	r24, r24
    2b58:	2c f4       	brge	.+10     	; 0x2b64 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	9c 8b       	std	Y+20, r25	; 0x14
    2b60:	8b 8b       	std	Y+19, r24	; 0x13
    2b62:	3f c0       	rjmp	.+126    	; 0x2be2 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2b64:	6d 89       	ldd	r22, Y+21	; 0x15
    2b66:	7e 89       	ldd	r23, Y+22	; 0x16
    2b68:	8f 89       	ldd	r24, Y+23	; 0x17
    2b6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	3f ef       	ldi	r19, 0xFF	; 255
    2b70:	4f e7       	ldi	r20, 0x7F	; 127
    2b72:	57 e4       	ldi	r21, 0x47	; 71
    2b74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b78:	18 16       	cp	r1, r24
    2b7a:	4c f5       	brge	.+82     	; 0x2bce <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b7c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	40 e2       	ldi	r20, 0x20	; 32
    2b8a:	51 e4       	ldi	r21, 0x41	; 65
    2b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	bc 01       	movw	r22, r24
    2b96:	cd 01       	movw	r24, r26
    2b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	9c 8b       	std	Y+20, r25	; 0x14
    2ba2:	8b 8b       	std	Y+19, r24	; 0x13
    2ba4:	0f c0       	rjmp	.+30     	; 0x2bc4 <LCD_displayCharacter+0x2ac>
    2ba6:	88 ec       	ldi	r24, 0xC8	; 200
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	9a 8b       	std	Y+18, r25	; 0x12
    2bac:	89 8b       	std	Y+17, r24	; 0x11
    2bae:	89 89       	ldd	r24, Y+17	; 0x11
    2bb0:	9a 89       	ldd	r25, Y+18	; 0x12
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	f1 f7       	brne	.-4      	; 0x2bb2 <LCD_displayCharacter+0x29a>
    2bb6:	9a 8b       	std	Y+18, r25	; 0x12
    2bb8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bba:	8b 89       	ldd	r24, Y+19	; 0x13
    2bbc:	9c 89       	ldd	r25, Y+20	; 0x14
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	9c 8b       	std	Y+20, r25	; 0x14
    2bc2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bc8:	00 97       	sbiw	r24, 0x00	; 0
    2bca:	69 f7       	brne	.-38     	; 0x2ba6 <LCD_displayCharacter+0x28e>
    2bcc:	14 c0       	rjmp	.+40     	; 0x2bf6 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bce:	6d 89       	ldd	r22, Y+21	; 0x15
    2bd0:	7e 89       	ldd	r23, Y+22	; 0x16
    2bd2:	8f 89       	ldd	r24, Y+23	; 0x17
    2bd4:	98 8d       	ldd	r25, Y+24	; 0x18
    2bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	9c 8b       	std	Y+20, r25	; 0x14
    2be0:	8b 8b       	std	Y+19, r24	; 0x13
    2be2:	8b 89       	ldd	r24, Y+19	; 0x13
    2be4:	9c 89       	ldd	r25, Y+20	; 0x14
    2be6:	98 8b       	std	Y+16, r25	; 0x10
    2be8:	8f 87       	std	Y+15, r24	; 0x0f
    2bea:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bec:	98 89       	ldd	r25, Y+16	; 0x10
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	f1 f7       	brne	.-4      	; 0x2bee <LCD_displayCharacter+0x2d6>
    2bf2:	98 8b       	std	Y+16, r25	; 0x10
    2bf4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2bf6:	83 e0       	ldi	r24, 0x03	; 3
    2bf8:	67 e0       	ldi	r22, 0x07	; 7
    2bfa:	40 e0       	ldi	r20, 0x00	; 0
    2bfc:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <GPIO_writePin>
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	a0 e8       	ldi	r26, 0x80	; 128
    2c06:	bf e3       	ldi	r27, 0x3F	; 63
    2c08:	8b 87       	std	Y+11, r24	; 0x0b
    2c0a:	9c 87       	std	Y+12, r25	; 0x0c
    2c0c:	ad 87       	std	Y+13, r26	; 0x0d
    2c0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c10:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c12:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	4a ef       	ldi	r20, 0xFA	; 250
    2c1e:	54 e4       	ldi	r21, 0x44	; 68
    2c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	8f 83       	std	Y+7, r24	; 0x07
    2c2a:	98 87       	std	Y+8, r25	; 0x08
    2c2c:	a9 87       	std	Y+9, r26	; 0x09
    2c2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c30:	6f 81       	ldd	r22, Y+7	; 0x07
    2c32:	78 85       	ldd	r23, Y+8	; 0x08
    2c34:	89 85       	ldd	r24, Y+9	; 0x09
    2c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	40 e8       	ldi	r20, 0x80	; 128
    2c3e:	5f e3       	ldi	r21, 0x3F	; 63
    2c40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c44:	88 23       	and	r24, r24
    2c46:	2c f4       	brge	.+10     	; 0x2c52 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	9e 83       	std	Y+6, r25	; 0x06
    2c4e:	8d 83       	std	Y+5, r24	; 0x05
    2c50:	3f c0       	rjmp	.+126    	; 0x2cd0 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2c52:	6f 81       	ldd	r22, Y+7	; 0x07
    2c54:	78 85       	ldd	r23, Y+8	; 0x08
    2c56:	89 85       	ldd	r24, Y+9	; 0x09
    2c58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	3f ef       	ldi	r19, 0xFF	; 255
    2c5e:	4f e7       	ldi	r20, 0x7F	; 127
    2c60:	57 e4       	ldi	r21, 0x47	; 71
    2c62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c66:	18 16       	cp	r1, r24
    2c68:	4c f5       	brge	.+82     	; 0x2cbc <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c70:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	40 e2       	ldi	r20, 0x20	; 32
    2c78:	51 e4       	ldi	r21, 0x41	; 65
    2c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	bc 01       	movw	r22, r24
    2c84:	cd 01       	movw	r24, r26
    2c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	9e 83       	std	Y+6, r25	; 0x06
    2c90:	8d 83       	std	Y+5, r24	; 0x05
    2c92:	0f c0       	rjmp	.+30     	; 0x2cb2 <LCD_displayCharacter+0x39a>
    2c94:	88 ec       	ldi	r24, 0xC8	; 200
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	9c 83       	std	Y+4, r25	; 0x04
    2c9a:	8b 83       	std	Y+3, r24	; 0x03
    2c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca0:	01 97       	sbiw	r24, 0x01	; 1
    2ca2:	f1 f7       	brne	.-4      	; 0x2ca0 <LCD_displayCharacter+0x388>
    2ca4:	9c 83       	std	Y+4, r25	; 0x04
    2ca6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    2caa:	9e 81       	ldd	r25, Y+6	; 0x06
    2cac:	01 97       	sbiw	r24, 0x01	; 1
    2cae:	9e 83       	std	Y+6, r25	; 0x06
    2cb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb6:	00 97       	sbiw	r24, 0x00	; 0
    2cb8:	69 f7       	brne	.-38     	; 0x2c94 <LCD_displayCharacter+0x37c>
    2cba:	14 c0       	rjmp	.+40     	; 0x2ce4 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cbc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cbe:	78 85       	ldd	r23, Y+8	; 0x08
    2cc0:	89 85       	ldd	r24, Y+9	; 0x09
    2cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	9e 83       	std	Y+6, r25	; 0x06
    2cce:	8d 83       	std	Y+5, r24	; 0x05
    2cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd4:	9a 83       	std	Y+2, r25	; 0x02
    2cd6:	89 83       	std	Y+1, r24	; 0x01
    2cd8:	89 81       	ldd	r24, Y+1	; 0x01
    2cda:	9a 81       	ldd	r25, Y+2	; 0x02
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	f1 f7       	brne	.-4      	; 0x2cdc <LCD_displayCharacter+0x3c4>
    2ce0:	9a 83       	std	Y+2, r25	; 0x02
    2ce2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2ce4:	e9 96       	adiw	r28, 0x39	; 57
    2ce6:	0f b6       	in	r0, 0x3f	; 63
    2ce8:	f8 94       	cli
    2cea:	de bf       	out	0x3e, r29	; 62
    2cec:	0f be       	out	0x3f, r0	; 63
    2cee:	cd bf       	out	0x3d, r28	; 61
    2cf0:	cf 91       	pop	r28
    2cf2:	df 91       	pop	r29
    2cf4:	08 95       	ret

00002cf6 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	00 d0       	rcall	.+0      	; 0x2cfc <LCD_displayString+0x6>
    2cfc:	0f 92       	push	r0
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
    2d02:	9b 83       	std	Y+3, r25	; 0x03
    2d04:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d06:	19 82       	std	Y+1, r1	; 0x01
    2d08:	0e c0       	rjmp	.+28     	; 0x2d26 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	28 2f       	mov	r18, r24
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	8a 81       	ldd	r24, Y+2	; 0x02
    2d12:	9b 81       	ldd	r25, Y+3	; 0x03
    2d14:	fc 01       	movw	r30, r24
    2d16:	e2 0f       	add	r30, r18
    2d18:	f3 1f       	adc	r31, r19
    2d1a:	80 81       	ld	r24, Z
    2d1c:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_displayCharacter>
		i++;
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	8f 5f       	subi	r24, 0xFF	; 255
    2d24:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2d26:	89 81       	ldd	r24, Y+1	; 0x01
    2d28:	28 2f       	mov	r18, r24
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d30:	fc 01       	movw	r30, r24
    2d32:	e2 0f       	add	r30, r18
    2d34:	f3 1f       	adc	r31, r19
    2d36:	80 81       	ld	r24, Z
    2d38:	88 23       	and	r24, r24
    2d3a:	39 f7       	brne	.-50     	; 0x2d0a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2d3c:	0f 90       	pop	r0
    2d3e:	0f 90       	pop	r0
    2d40:	0f 90       	pop	r0
    2d42:	cf 91       	pop	r28
    2d44:	df 91       	pop	r29
    2d46:	08 95       	ret

00002d48 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	00 d0       	rcall	.+0      	; 0x2d4e <LCD_moveCursor+0x6>
    2d4e:	00 d0       	rcall	.+0      	; 0x2d50 <LCD_moveCursor+0x8>
    2d50:	0f 92       	push	r0
    2d52:	cd b7       	in	r28, 0x3d	; 61
    2d54:	de b7       	in	r29, 0x3e	; 62
    2d56:	8a 83       	std	Y+2, r24	; 0x02
    2d58:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5c:	28 2f       	mov	r18, r24
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	3d 83       	std	Y+5, r19	; 0x05
    2d62:	2c 83       	std	Y+4, r18	; 0x04
    2d64:	8c 81       	ldd	r24, Y+4	; 0x04
    2d66:	9d 81       	ldd	r25, Y+5	; 0x05
    2d68:	81 30       	cpi	r24, 0x01	; 1
    2d6a:	91 05       	cpc	r25, r1
    2d6c:	c1 f0       	breq	.+48     	; 0x2d9e <LCD_moveCursor+0x56>
    2d6e:	2c 81       	ldd	r18, Y+4	; 0x04
    2d70:	3d 81       	ldd	r19, Y+5	; 0x05
    2d72:	22 30       	cpi	r18, 0x02	; 2
    2d74:	31 05       	cpc	r19, r1
    2d76:	2c f4       	brge	.+10     	; 0x2d82 <LCD_moveCursor+0x3a>
    2d78:	8c 81       	ldd	r24, Y+4	; 0x04
    2d7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d7c:	00 97       	sbiw	r24, 0x00	; 0
    2d7e:	61 f0       	breq	.+24     	; 0x2d98 <LCD_moveCursor+0x50>
    2d80:	19 c0       	rjmp	.+50     	; 0x2db4 <LCD_moveCursor+0x6c>
    2d82:	2c 81       	ldd	r18, Y+4	; 0x04
    2d84:	3d 81       	ldd	r19, Y+5	; 0x05
    2d86:	22 30       	cpi	r18, 0x02	; 2
    2d88:	31 05       	cpc	r19, r1
    2d8a:	69 f0       	breq	.+26     	; 0x2da6 <LCD_moveCursor+0x5e>
    2d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d90:	83 30       	cpi	r24, 0x03	; 3
    2d92:	91 05       	cpc	r25, r1
    2d94:	61 f0       	breq	.+24     	; 0x2dae <LCD_moveCursor+0x66>
    2d96:	0e c0       	rjmp	.+28     	; 0x2db4 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	89 83       	std	Y+1, r24	; 0x01
    2d9c:	0b c0       	rjmp	.+22     	; 0x2db4 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2da0:	80 5c       	subi	r24, 0xC0	; 192
    2da2:	89 83       	std	Y+1, r24	; 0x01
    2da4:	07 c0       	rjmp	.+14     	; 0x2db4 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2da6:	8b 81       	ldd	r24, Y+3	; 0x03
    2da8:	80 5f       	subi	r24, 0xF0	; 240
    2daa:	89 83       	std	Y+1, r24	; 0x01
    2dac:	03 c0       	rjmp	.+6      	; 0x2db4 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2dae:	8b 81       	ldd	r24, Y+3	; 0x03
    2db0:	80 5b       	subi	r24, 0xB0	; 176
    2db2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	80 68       	ori	r24, 0x80	; 128
    2db8:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
}
    2dbc:	0f 90       	pop	r0
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	0f 90       	pop	r0
    2dc6:	cf 91       	pop	r28
    2dc8:	df 91       	pop	r29
    2dca:	08 95       	ret

00002dcc <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2dcc:	df 93       	push	r29
    2dce:	cf 93       	push	r28
    2dd0:	00 d0       	rcall	.+0      	; 0x2dd2 <LCD_displayStringRowColumn+0x6>
    2dd2:	00 d0       	rcall	.+0      	; 0x2dd4 <LCD_displayStringRowColumn+0x8>
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	89 83       	std	Y+1, r24	; 0x01
    2dda:	6a 83       	std	Y+2, r22	; 0x02
    2ddc:	5c 83       	std	Y+4, r21	; 0x04
    2dde:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	6a 81       	ldd	r22, Y+2	; 0x02
    2de4:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2de8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dea:	9c 81       	ldd	r25, Y+4	; 0x04
    2dec:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <LCD_displayString>
}
    2df0:	0f 90       	pop	r0
    2df2:	0f 90       	pop	r0
    2df4:	0f 90       	pop	r0
    2df6:	0f 90       	pop	r0
    2df8:	cf 91       	pop	r28
    2dfa:	df 91       	pop	r29
    2dfc:	08 95       	ret

00002dfe <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2dfe:	df 93       	push	r29
    2e00:	cf 93       	push	r28
    2e02:	cd b7       	in	r28, 0x3d	; 61
    2e04:	de b7       	in	r29, 0x3e	; 62
    2e06:	62 97       	sbiw	r28, 0x12	; 18
    2e08:	0f b6       	in	r0, 0x3f	; 63
    2e0a:	f8 94       	cli
    2e0c:	de bf       	out	0x3e, r29	; 62
    2e0e:	0f be       	out	0x3f, r0	; 63
    2e10:	cd bf       	out	0x3d, r28	; 61
    2e12:	9a 8b       	std	Y+18, r25	; 0x12
    2e14:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2e16:	89 89       	ldd	r24, Y+17	; 0x11
    2e18:	9a 89       	ldd	r25, Y+18	; 0x12
    2e1a:	9e 01       	movw	r18, r28
    2e1c:	2f 5f       	subi	r18, 0xFF	; 255
    2e1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e20:	b9 01       	movw	r22, r18
    2e22:	4a e0       	ldi	r20, 0x0A	; 10
    2e24:	50 e0       	ldi	r21, 0x00	; 0
    2e26:	0e 94 83 18 	call	0x3106	; 0x3106 <itoa>
   LCD_displayString(buff); /* Display the string */
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	01 96       	adiw	r24, 0x01	; 1
    2e2e:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <LCD_displayString>
}
    2e32:	62 96       	adiw	r28, 0x12	; 18
    2e34:	0f b6       	in	r0, 0x3f	; 63
    2e36:	f8 94       	cli
    2e38:	de bf       	out	0x3e, r29	; 62
    2e3a:	0f be       	out	0x3f, r0	; 63
    2e3c:	cd bf       	out	0x3d, r28	; 61
    2e3e:	cf 91       	pop	r28
    2e40:	df 91       	pop	r29
    2e42:	08 95       	ret

00002e44 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2e44:	df 93       	push	r29
    2e46:	cf 93       	push	r28
    2e48:	cd b7       	in	r28, 0x3d	; 61
    2e4a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_sendCommand>
}
    2e52:	cf 91       	pop	r28
    2e54:	df 91       	pop	r29
    2e56:	08 95       	ret

00002e58 <__vector_9>:


/* Interrupt for Normal (Overflow) Mode */

ISR(TIMER1_OVF_vect)
{
    2e58:	1f 92       	push	r1
    2e5a:	0f 92       	push	r0
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	0f 92       	push	r0
    2e60:	11 24       	eor	r1, r1
    2e62:	2f 93       	push	r18
    2e64:	3f 93       	push	r19
    2e66:	4f 93       	push	r20
    2e68:	5f 93       	push	r21
    2e6a:	6f 93       	push	r22
    2e6c:	7f 93       	push	r23
    2e6e:	8f 93       	push	r24
    2e70:	9f 93       	push	r25
    2e72:	af 93       	push	r26
    2e74:	bf 93       	push	r27
    2e76:	ef 93       	push	r30
    2e78:	ff 93       	push	r31
    2e7a:	df 93       	push	r29
    2e7c:	cf 93       	push	r28
    2e7e:	cd b7       	in	r28, 0x3d	; 61
    2e80:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER1_callBackPtr != NULL_PTR)
    2e82:	80 91 f7 00 	lds	r24, 0x00F7
    2e86:	90 91 f8 00 	lds	r25, 0x00F8
    2e8a:	00 97       	sbiw	r24, 0x00	; 0
    2e8c:	29 f0       	breq	.+10     	; 0x2e98 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER1_callBackPtr)();
    2e8e:	e0 91 f7 00 	lds	r30, 0x00F7
    2e92:	f0 91 f8 00 	lds	r31, 0x00F8
    2e96:	09 95       	icall
	}
}
    2e98:	cf 91       	pop	r28
    2e9a:	df 91       	pop	r29
    2e9c:	ff 91       	pop	r31
    2e9e:	ef 91       	pop	r30
    2ea0:	bf 91       	pop	r27
    2ea2:	af 91       	pop	r26
    2ea4:	9f 91       	pop	r25
    2ea6:	8f 91       	pop	r24
    2ea8:	7f 91       	pop	r23
    2eaa:	6f 91       	pop	r22
    2eac:	5f 91       	pop	r21
    2eae:	4f 91       	pop	r20
    2eb0:	3f 91       	pop	r19
    2eb2:	2f 91       	pop	r18
    2eb4:	0f 90       	pop	r0
    2eb6:	0f be       	out	0x3f, r0	; 63
    2eb8:	0f 90       	pop	r0
    2eba:	1f 90       	pop	r1
    2ebc:	18 95       	reti

00002ebe <__vector_7>:
/* Interrupt for Compare Mode */
ISR(TIMER1_COMPA_vect)
{
    2ebe:	1f 92       	push	r1
    2ec0:	0f 92       	push	r0
    2ec2:	0f b6       	in	r0, 0x3f	; 63
    2ec4:	0f 92       	push	r0
    2ec6:	11 24       	eor	r1, r1
    2ec8:	2f 93       	push	r18
    2eca:	3f 93       	push	r19
    2ecc:	4f 93       	push	r20
    2ece:	5f 93       	push	r21
    2ed0:	6f 93       	push	r22
    2ed2:	7f 93       	push	r23
    2ed4:	8f 93       	push	r24
    2ed6:	9f 93       	push	r25
    2ed8:	af 93       	push	r26
    2eda:	bf 93       	push	r27
    2edc:	ef 93       	push	r30
    2ede:	ff 93       	push	r31
    2ee0:	df 93       	push	r29
    2ee2:	cf 93       	push	r28
    2ee4:	cd b7       	in	r28, 0x3d	; 61
    2ee6:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER1_callBackPtr != NULL_PTR)
    2ee8:	80 91 f7 00 	lds	r24, 0x00F7
    2eec:	90 91 f8 00 	lds	r25, 0x00F8
    2ef0:	00 97       	sbiw	r24, 0x00	; 0
    2ef2:	29 f0       	breq	.+10     	; 0x2efe <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER1_callBackPtr)();
    2ef4:	e0 91 f7 00 	lds	r30, 0x00F7
    2ef8:	f0 91 f8 00 	lds	r31, 0x00F8
    2efc:	09 95       	icall
	}
}
    2efe:	cf 91       	pop	r28
    2f00:	df 91       	pop	r29
    2f02:	ff 91       	pop	r31
    2f04:	ef 91       	pop	r30
    2f06:	bf 91       	pop	r27
    2f08:	af 91       	pop	r26
    2f0a:	9f 91       	pop	r25
    2f0c:	8f 91       	pop	r24
    2f0e:	7f 91       	pop	r23
    2f10:	6f 91       	pop	r22
    2f12:	5f 91       	pop	r21
    2f14:	4f 91       	pop	r20
    2f16:	3f 91       	pop	r19
    2f18:	2f 91       	pop	r18
    2f1a:	0f 90       	pop	r0
    2f1c:	0f be       	out	0x3f, r0	; 63
    2f1e:	0f 90       	pop	r0
    2f20:	1f 90       	pop	r1
    2f22:	18 95       	reti

00002f24 <Timer1_init>:
/*
 * Description :
 * Function to initialize timer_1 driver
 * */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2f24:	df 93       	push	r29
    2f26:	cf 93       	push	r28
    2f28:	00 d0       	rcall	.+0      	; 0x2f2a <Timer1_init+0x6>
    2f2a:	cd b7       	in	r28, 0x3d	; 61
    2f2c:	de b7       	in	r29, 0x3e	; 62
    2f2e:	9a 83       	std	Y+2, r25	; 0x02
    2f30:	89 83       	std	Y+1, r24	; 0x01

	/* for non-PWM mode SET FOC1A,FOC1B bits in TCCR1A Register */
	SET_BIT(TCCR1A,FOC1A);
    2f32:	af e4       	ldi	r26, 0x4F	; 79
    2f34:	b0 e0       	ldi	r27, 0x00	; 0
    2f36:	ef e4       	ldi	r30, 0x4F	; 79
    2f38:	f0 e0       	ldi	r31, 0x00	; 0
    2f3a:	80 81       	ld	r24, Z
    2f3c:	88 60       	ori	r24, 0x08	; 8
    2f3e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B);
    2f40:	af e4       	ldi	r26, 0x4F	; 79
    2f42:	b0 e0       	ldi	r27, 0x00	; 0
    2f44:	ef e4       	ldi	r30, 0x4F	; 79
    2f46:	f0 e0       	ldi	r31, 0x00	; 0
    2f48:	80 81       	ld	r24, Z
    2f4a:	84 60       	ori	r24, 0x04	; 4
    2f4c:	8c 93       	st	X, r24
	/* Initial Value for Timer1 */
	TCNT1 = Config_Ptr->initial_value;
    2f4e:	ac e4       	ldi	r26, 0x4C	; 76
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	e9 81       	ldd	r30, Y+1	; 0x01
    2f54:	fa 81       	ldd	r31, Y+2	; 0x02
    2f56:	80 81       	ld	r24, Z
    2f58:	91 81       	ldd	r25, Z+1	; 0x01
    2f5a:	11 96       	adiw	r26, 0x01	; 1
    2f5c:	9c 93       	st	X, r25
    2f5e:	8e 93       	st	-X, r24
	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    2f60:	ae e4       	ldi	r26, 0x4E	; 78
    2f62:	b0 e0       	ldi	r27, 0x00	; 0
    2f64:	ee e4       	ldi	r30, 0x4E	; 78
    2f66:	f0 e0       	ldi	r31, 0x00	; 0
    2f68:	80 81       	ld	r24, Z
    2f6a:	98 2f       	mov	r25, r24
    2f6c:	98 7f       	andi	r25, 0xF8	; 248
    2f6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f70:	fa 81       	ldd	r31, Y+2	; 0x02
    2f72:	84 81       	ldd	r24, Z+4	; 0x04
    2f74:	89 2b       	or	r24, r25
    2f76:	8c 93       	st	X, r24

	if((Config_Ptr->mode)==NORMAL_MODE)
    2f78:	e9 81       	ldd	r30, Y+1	; 0x01
    2f7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f7c:	85 81       	ldd	r24, Z+5	; 0x05
    2f7e:	88 23       	and	r24, r24
    2f80:	79 f4       	brne	.+30     	; 0x2fa0 <Timer1_init+0x7c>
	{

		/* Enable Timer1 overflow interrupts */
		SET_BIT(TIMSK,TOIE1);
    2f82:	a9 e5       	ldi	r26, 0x59	; 89
    2f84:	b0 e0       	ldi	r27, 0x00	; 0
    2f86:	e9 e5       	ldi	r30, 0x59	; 89
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	80 81       	ld	r24, Z
    2f8c:	84 60       	ori	r24, 0x04	; 4
    2f8e:	8c 93       	st	X, r24
		/* Enable overflow flag */
		SET_BIT(TIFR,TOV1);
    2f90:	a8 e5       	ldi	r26, 0x58	; 88
    2f92:	b0 e0       	ldi	r27, 0x00	; 0
    2f94:	e8 e5       	ldi	r30, 0x58	; 88
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	80 81       	ld	r24, Z
    2f9a:	84 60       	ori	r24, 0x04	; 4
    2f9c:	8c 93       	st	X, r24
    2f9e:	23 c0       	rjmp	.+70     	; 0x2fe6 <Timer1_init+0xc2>
	}
	else if((Config_Ptr->mode)==COMPARE_MODE)
    2fa0:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa2:	fa 81       	ldd	r31, Y+2	; 0x02
    2fa4:	85 81       	ldd	r24, Z+5	; 0x05
    2fa6:	81 30       	cpi	r24, 0x01	; 1
    2fa8:	f1 f4       	brne	.+60     	; 0x2fe6 <Timer1_init+0xc2>
	{

		/* Configure timer control register TCCR1B
		 * CTC Mode WGM12=1 WGM13=0
		 */
		SET_BIT(TCCR1B,WGM12);
    2faa:	ae e4       	ldi	r26, 0x4E	; 78
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	ee e4       	ldi	r30, 0x4E	; 78
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	80 81       	ld	r24, Z
    2fb4:	88 60       	ori	r24, 0x08	; 8
    2fb6:	8c 93       	st	X, r24

		/*Set the compare value for compare mode */
		OCR1A=Config_Ptr->compare_value;
    2fb8:	aa e4       	ldi	r26, 0x4A	; 74
    2fba:	b0 e0       	ldi	r27, 0x00	; 0
    2fbc:	e9 81       	ldd	r30, Y+1	; 0x01
    2fbe:	fa 81       	ldd	r31, Y+2	; 0x02
    2fc0:	82 81       	ldd	r24, Z+2	; 0x02
    2fc2:	93 81       	ldd	r25, Z+3	; 0x03
    2fc4:	11 96       	adiw	r26, 0x01	; 1
    2fc6:	9c 93       	st	X, r25
    2fc8:	8e 93       	st	-X, r24

		/* Enable Timer1 Compare A Interrupt */
		SET_BIT(TIMSK,OCIE1A);
    2fca:	a9 e5       	ldi	r26, 0x59	; 89
    2fcc:	b0 e0       	ldi	r27, 0x00	; 0
    2fce:	e9 e5       	ldi	r30, 0x59	; 89
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	80 81       	ld	r24, Z
    2fd4:	80 61       	ori	r24, 0x10	; 16
    2fd6:	8c 93       	st	X, r24
		/* Enable CTC flag */
		SET_BIT(TIFR,OCF1A);
    2fd8:	a8 e5       	ldi	r26, 0x58	; 88
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	e8 e5       	ldi	r30, 0x58	; 88
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	80 81       	ld	r24, Z
    2fe2:	80 61       	ori	r24, 0x10	; 16
    2fe4:	8c 93       	st	X, r24
	}
}
    2fe6:	0f 90       	pop	r0
    2fe8:	0f 90       	pop	r0
    2fea:	cf 91       	pop	r28
    2fec:	df 91       	pop	r29
    2fee:	08 95       	ret

00002ff0 <Timer1_deInit>:
/*
 * Description :
 * Function to disable timer_1 driver
 * */
void Timer1_deInit(void)
{
    2ff0:	df 93       	push	r29
    2ff2:	cf 93       	push	r28
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
	/*Clear all timer register*/
	TCCR1A=0;
    2ff8:	ef e4       	ldi	r30, 0x4F	; 79
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	10 82       	st	Z, r1
	TCNT1=0;
    2ffe:	ec e4       	ldi	r30, 0x4C	; 76
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	11 82       	std	Z+1, r1	; 0x01
    3004:	10 82       	st	Z, r1
	/*Disable the interrupt MISK register*/
	CLEAR_BIT(TIMSK,TOIE1);
    3006:	a9 e5       	ldi	r26, 0x59	; 89
    3008:	b0 e0       	ldi	r27, 0x00	; 0
    300a:	e9 e5       	ldi	r30, 0x59	; 89
    300c:	f0 e0       	ldi	r31, 0x00	; 0
    300e:	80 81       	ld	r24, Z
    3010:	8b 7f       	andi	r24, 0xFB	; 251
    3012:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,OCIE1A);
    3014:	a9 e5       	ldi	r26, 0x59	; 89
    3016:	b0 e0       	ldi	r27, 0x00	; 0
    3018:	e9 e5       	ldi	r30, 0x59	; 89
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	80 81       	ld	r24, Z
    301e:	8f 7e       	andi	r24, 0xEF	; 239
    3020:	8c 93       	st	X, r24
	g_TIMER1_callBackPtr = NULL_PTR;
    3022:	10 92 f8 00 	sts	0x00F8, r1
    3026:	10 92 f7 00 	sts	0x00F7, r1
}
    302a:	cf 91       	pop	r28
    302c:	df 91       	pop	r29
    302e:	08 95       	ret

00003030 <Timer1_setCallBack>:
/*
 * Description :
 * Function to set call back function address of timer_1 driver
 * */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	00 d0       	rcall	.+0      	; 0x3036 <Timer1_setCallBack+0x6>
    3036:	cd b7       	in	r28, 0x3d	; 61
    3038:	de b7       	in	r29, 0x3e	; 62
    303a:	9a 83       	std	Y+2, r25	; 0x02
    303c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_TIMER1_callBackPtr = a_ptr;
    303e:	89 81       	ldd	r24, Y+1	; 0x01
    3040:	9a 81       	ldd	r25, Y+2	; 0x02
    3042:	90 93 f8 00 	sts	0x00F8, r25
    3046:	80 93 f7 00 	sts	0x00F7, r24

}
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	cf 91       	pop	r28
    3050:	df 91       	pop	r29
    3052:	08 95       	ret

00003054 <__udivmodsi4>:
    3054:	a1 e2       	ldi	r26, 0x21	; 33
    3056:	1a 2e       	mov	r1, r26
    3058:	aa 1b       	sub	r26, r26
    305a:	bb 1b       	sub	r27, r27
    305c:	fd 01       	movw	r30, r26
    305e:	0d c0       	rjmp	.+26     	; 0x307a <__udivmodsi4_ep>

00003060 <__udivmodsi4_loop>:
    3060:	aa 1f       	adc	r26, r26
    3062:	bb 1f       	adc	r27, r27
    3064:	ee 1f       	adc	r30, r30
    3066:	ff 1f       	adc	r31, r31
    3068:	a2 17       	cp	r26, r18
    306a:	b3 07       	cpc	r27, r19
    306c:	e4 07       	cpc	r30, r20
    306e:	f5 07       	cpc	r31, r21
    3070:	20 f0       	brcs	.+8      	; 0x307a <__udivmodsi4_ep>
    3072:	a2 1b       	sub	r26, r18
    3074:	b3 0b       	sbc	r27, r19
    3076:	e4 0b       	sbc	r30, r20
    3078:	f5 0b       	sbc	r31, r21

0000307a <__udivmodsi4_ep>:
    307a:	66 1f       	adc	r22, r22
    307c:	77 1f       	adc	r23, r23
    307e:	88 1f       	adc	r24, r24
    3080:	99 1f       	adc	r25, r25
    3082:	1a 94       	dec	r1
    3084:	69 f7       	brne	.-38     	; 0x3060 <__udivmodsi4_loop>
    3086:	60 95       	com	r22
    3088:	70 95       	com	r23
    308a:	80 95       	com	r24
    308c:	90 95       	com	r25
    308e:	9b 01       	movw	r18, r22
    3090:	ac 01       	movw	r20, r24
    3092:	bd 01       	movw	r22, r26
    3094:	cf 01       	movw	r24, r30
    3096:	08 95       	ret

00003098 <__prologue_saves__>:
    3098:	2f 92       	push	r2
    309a:	3f 92       	push	r3
    309c:	4f 92       	push	r4
    309e:	5f 92       	push	r5
    30a0:	6f 92       	push	r6
    30a2:	7f 92       	push	r7
    30a4:	8f 92       	push	r8
    30a6:	9f 92       	push	r9
    30a8:	af 92       	push	r10
    30aa:	bf 92       	push	r11
    30ac:	cf 92       	push	r12
    30ae:	df 92       	push	r13
    30b0:	ef 92       	push	r14
    30b2:	ff 92       	push	r15
    30b4:	0f 93       	push	r16
    30b6:	1f 93       	push	r17
    30b8:	cf 93       	push	r28
    30ba:	df 93       	push	r29
    30bc:	cd b7       	in	r28, 0x3d	; 61
    30be:	de b7       	in	r29, 0x3e	; 62
    30c0:	ca 1b       	sub	r28, r26
    30c2:	db 0b       	sbc	r29, r27
    30c4:	0f b6       	in	r0, 0x3f	; 63
    30c6:	f8 94       	cli
    30c8:	de bf       	out	0x3e, r29	; 62
    30ca:	0f be       	out	0x3f, r0	; 63
    30cc:	cd bf       	out	0x3d, r28	; 61
    30ce:	09 94       	ijmp

000030d0 <__epilogue_restores__>:
    30d0:	2a 88       	ldd	r2, Y+18	; 0x12
    30d2:	39 88       	ldd	r3, Y+17	; 0x11
    30d4:	48 88       	ldd	r4, Y+16	; 0x10
    30d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    30d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    30da:	7d 84       	ldd	r7, Y+13	; 0x0d
    30dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    30de:	9b 84       	ldd	r9, Y+11	; 0x0b
    30e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    30e2:	b9 84       	ldd	r11, Y+9	; 0x09
    30e4:	c8 84       	ldd	r12, Y+8	; 0x08
    30e6:	df 80       	ldd	r13, Y+7	; 0x07
    30e8:	ee 80       	ldd	r14, Y+6	; 0x06
    30ea:	fd 80       	ldd	r15, Y+5	; 0x05
    30ec:	0c 81       	ldd	r16, Y+4	; 0x04
    30ee:	1b 81       	ldd	r17, Y+3	; 0x03
    30f0:	aa 81       	ldd	r26, Y+2	; 0x02
    30f2:	b9 81       	ldd	r27, Y+1	; 0x01
    30f4:	ce 0f       	add	r28, r30
    30f6:	d1 1d       	adc	r29, r1
    30f8:	0f b6       	in	r0, 0x3f	; 63
    30fa:	f8 94       	cli
    30fc:	de bf       	out	0x3e, r29	; 62
    30fe:	0f be       	out	0x3f, r0	; 63
    3100:	cd bf       	out	0x3d, r28	; 61
    3102:	ed 01       	movw	r28, r26
    3104:	08 95       	ret

00003106 <itoa>:
    3106:	fb 01       	movw	r30, r22
    3108:	9f 01       	movw	r18, r30
    310a:	e8 94       	clt
    310c:	42 30       	cpi	r20, 0x02	; 2
    310e:	c4 f0       	brlt	.+48     	; 0x3140 <itoa+0x3a>
    3110:	45 32       	cpi	r20, 0x25	; 37
    3112:	b4 f4       	brge	.+44     	; 0x3140 <itoa+0x3a>
    3114:	4a 30       	cpi	r20, 0x0A	; 10
    3116:	29 f4       	brne	.+10     	; 0x3122 <itoa+0x1c>
    3118:	97 fb       	bst	r25, 7
    311a:	1e f4       	brtc	.+6      	; 0x3122 <itoa+0x1c>
    311c:	90 95       	com	r25
    311e:	81 95       	neg	r24
    3120:	9f 4f       	sbci	r25, 0xFF	; 255
    3122:	64 2f       	mov	r22, r20
    3124:	77 27       	eor	r23, r23
    3126:	0e 94 b4 18 	call	0x3168	; 0x3168 <__udivmodhi4>
    312a:	80 5d       	subi	r24, 0xD0	; 208
    312c:	8a 33       	cpi	r24, 0x3A	; 58
    312e:	0c f0       	brlt	.+2      	; 0x3132 <itoa+0x2c>
    3130:	89 5d       	subi	r24, 0xD9	; 217
    3132:	81 93       	st	Z+, r24
    3134:	cb 01       	movw	r24, r22
    3136:	00 97       	sbiw	r24, 0x00	; 0
    3138:	a1 f7       	brne	.-24     	; 0x3122 <itoa+0x1c>
    313a:	16 f4       	brtc	.+4      	; 0x3140 <itoa+0x3a>
    313c:	5d e2       	ldi	r21, 0x2D	; 45
    313e:	51 93       	st	Z+, r21
    3140:	10 82       	st	Z, r1
    3142:	c9 01       	movw	r24, r18
    3144:	0c 94 a4 18 	jmp	0x3148	; 0x3148 <strrev>

00003148 <strrev>:
    3148:	dc 01       	movw	r26, r24
    314a:	fc 01       	movw	r30, r24
    314c:	67 2f       	mov	r22, r23
    314e:	71 91       	ld	r23, Z+
    3150:	77 23       	and	r23, r23
    3152:	e1 f7       	brne	.-8      	; 0x314c <strrev+0x4>
    3154:	32 97       	sbiw	r30, 0x02	; 2
    3156:	04 c0       	rjmp	.+8      	; 0x3160 <strrev+0x18>
    3158:	7c 91       	ld	r23, X
    315a:	6d 93       	st	X+, r22
    315c:	70 83       	st	Z, r23
    315e:	62 91       	ld	r22, -Z
    3160:	ae 17       	cp	r26, r30
    3162:	bf 07       	cpc	r27, r31
    3164:	c8 f3       	brcs	.-14     	; 0x3158 <strrev+0x10>
    3166:	08 95       	ret

00003168 <__udivmodhi4>:
    3168:	aa 1b       	sub	r26, r26
    316a:	bb 1b       	sub	r27, r27
    316c:	51 e1       	ldi	r21, 0x11	; 17
    316e:	07 c0       	rjmp	.+14     	; 0x317e <__udivmodhi4_ep>

00003170 <__udivmodhi4_loop>:
    3170:	aa 1f       	adc	r26, r26
    3172:	bb 1f       	adc	r27, r27
    3174:	a6 17       	cp	r26, r22
    3176:	b7 07       	cpc	r27, r23
    3178:	10 f0       	brcs	.+4      	; 0x317e <__udivmodhi4_ep>
    317a:	a6 1b       	sub	r26, r22
    317c:	b7 0b       	sbc	r27, r23

0000317e <__udivmodhi4_ep>:
    317e:	88 1f       	adc	r24, r24
    3180:	99 1f       	adc	r25, r25
    3182:	5a 95       	dec	r21
    3184:	a9 f7       	brne	.-22     	; 0x3170 <__udivmodhi4_loop>
    3186:	80 95       	com	r24
    3188:	90 95       	com	r25
    318a:	bc 01       	movw	r22, r24
    318c:	cd 01       	movw	r24, r26
    318e:	08 95       	ret

00003190 <_exit>:
    3190:	f8 94       	cli

00003192 <__stop_program>:
    3192:	ff cf       	rjmp	.-2      	; 0x3192 <__stop_program>
